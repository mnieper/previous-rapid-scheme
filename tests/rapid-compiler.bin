(import (rapid))
(letrec*-values (((make-parameter_2) (case-lambda ((init_0) (letrec*-values () (make-parameter_2 init_0 (case-lambda ((value_1) (letrec*-values () value_1)))))) ((init_8 converter_3) (letrec*-values (((value_6) (converter_3 init_8))) (case-lambda (args_4 (letrec*-values () (if (null? args_4) value_6 (if (eq? (car args_4) <param-set!>_7) (set! value_6 (cadr args_4)) (if (eq? (car args_4) <param-convert>_5) converter_3 (error "bad parameter syntax"))))))))))) ((<param-set!>_7) (vector #f)) ((<param-convert>_5) (vector #f)) ((current-input-port_9) (make-parameter_2 (current-input-port))) ((current-output-port_10) (make-parameter_2 (current-output-port))) ((current-error-port_11) (make-parameter_2 (current-error-port))) ((read-char_13) (case-lambda (() (letrec*-values () (read-char (current-input-port_9)))) ((port_12) (letrec*-values () (read-char port_12))))) ((peek-char_15) (case-lambda (() (letrec*-values () (peek-char (current-input-port_9)))) ((port_14) (letrec*-values () (peek-char port_14))))) ((read-line_17) (case-lambda (() (letrec*-values () (read-line (current-input-port_9)))) ((port_16) (letrec*-values () (read-line port_16))))) ((char-ready?_19) (case-lambda (() (letrec*-values () (char-ready? (current-input-port_9)))) ((port_18) (letrec*-values () (char-ready? port_18))))) ((read-string_23) (case-lambda ((k_20) (letrec*-values () (read-string k_20 (current-input-port_9)))) ((k_21 port_22) (letrec*-values () (read-string k_21 port_22))))) ((read-u8_25) (case-lambda (() (letrec*-values () (read-u8 (current-input-port_9)))) ((port_24) (letrec*-values () (read-u8 port_24))))) ((u8-ready?_27) (case-lambda (() (letrec*-values () (u8-ready? (current-input-port_9)))) ((port_26) (letrec*-values () (u8-ready? port_26))))) ((read-bytevector_31) (case-lambda ((k_28) (letrec*-values () (read-bytevector (current-input-port_9)))) ((k_29 port_30) (letrec*-values () (read-bytevector k_29 port_30))))) ((read-bytevector!_42) (case-lambda ((bytevector_32) (letrec*-values () (read-bytevector! bytevector_32 (current-input-port_9)))) ((bytevector_33 port_34) (letrec*-values () (read-bytevector! bytevector_33 port_34))) ((bytevector_35 port_36 start_37) (letrec*-values () (read-bytevector! bytevector_35 port_36 start_37))) ((bytevector_38 port_39 start_40 end_41) (letrec*-values () (read-bytevector! bytevector_38 port_39 start_40 end_41))))) ((newline_44) (case-lambda (() (letrec*-values () (newline (current-output-port_10)))) ((port_43) (letrec*-values () (newline port_43))))) ((write-char_48) (case-lambda ((char_45) (letrec*-values () (write-char char_45 (current-output-port_10)))) ((char_46 port_47) (letrec*-values () (write-char char_46 port_47))))) ((write-string_59) (case-lambda ((string_49) (letrec*-values () (write-string string_49 (current-output-port_10)))) ((string_50 port_51) (letrec*-values () (write-string string_50 port_51))) ((string_54 port_52 start_53) (letrec*-values () (write-string port_52 start_53))) ((string_58 port_55 start_56 end_57) (letrec*-values () (write-string port_55 start_56 end_57))))) ((write-u8_63) (case-lambda ((byte_60) (letrec*-values () (write-u8 byte_60 (current-output-port_10)))) ((byte_61 port_62) (letrec*-values () (write-u8 byte_61 port_62))))) ((write-bytevector_74) (case-lambda ((bytevector_64) (letrec*-values () (write-bytevector bytevector_64 (current-output-port_10)))) ((bytevector_65 port_66) (letrec*-values () (write-bytevector bytevector_65 port_66))) ((bytevector_69 port_67 start_68) (letrec*-values () (write-bytevector port_67 start_68))) ((bytevector_73 port_70 start_71 end_72) (letrec*-values () (write-bytevector port_70 start_71 end_72))))) ((flush-output-port_76) (case-lambda (() (letrec*-values () (flush-output-port (current-output-port_10)))) ((port_75) (letrec*-values () (flush-output-port port_75))))) ((display_80) (case-lambda ((obj_77) (letrec*-values () (display obj_77 (current-output-port_10)))) ((obj_78 port_79) (letrec*-values () (display obj_78 port_79))))) ((write_84) (case-lambda ((obj_81) (letrec*-values () (write obj_81 (current-output-port_10)))) ((obj_82 port_83) (letrec*-values () (write obj_82 port_83))))) ((write-shared_88) (case-lambda ((obj_85) (letrec*-values () (write-shared obj_85 (current-output-port_10)))) ((obj_86 port_87) (letrec*-values () (write-shared obj_86 port_87))))) ((write-simple_92) (case-lambda ((obj_89) (letrec*-values () (write-simple obj_89 (current-output-port_10)))) ((obj_90 port_91) (letrec*-values () (write-simple obj_90 port_91))))) ((format_99) (case-lambda ((format-string_93 . objects_94) (letrec*-values () ((case-lambda ((buffer_97) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_95) (values (case-lambda ((format-list_96 objects_98) (letrec*-values () (if (null? format-list_96) (get-output-string buffer_97) (if (char=? (car format-list_96) #\~) (if (null? (cdr format-list_96)) (error "format: incomplete escape sequence" format-string_93) ((case-lambda ((atom-key_100) (letrec*-values () (if (memv atom-key_100 (quote (#\a))) (if (null? objects_98) (error "format: no value for escape sequence ‘~a’" format-string_93) (begin (display_80 (car objects_98) buffer_97) (loop_95 (cddr format-list_96) (cdr objects_98)))) (if (memv atom-key_100 (quote (#\s))) (if (null? objects_98) (error "format: no value for escape sequence ‘~s’" format-string_93) (begin (write_84 (car objects_98) buffer_97) (loop_95 (cddr format-list_96) (cdr objects_98)))) (if (memv atom-key_100 (quote (#\%))) (begin (newline_44 buffer_97) (loop_95 (cddr format-list_96) objects_98)) (if (memv atom-key_100 (quote (#\~))) (begin (write-char_48 #\~ buffer_97) (loop_95 (cddr format-list_96) objects_98)) (error (format_99 "format: unrecognized escape sequence ‘~~~a’" (cadr format-list_96)) format-string_93)))))))) (cadr format-list_96))) (begin (write-char_48 (car format-list_96) buffer_97) (loop_95 (cdr format-list_96) objects_98)))))))))) ((case-lambda (() (letrec*-values () loop_95)))))))) (string->list format-string_93) objects_94)))) (open-output-string)))))) ((current-search-paths_101) (make-parameter_2 (quote (".")))) ((make-coroutine-generator_110) (case-lambda ((proc_105) (letrec*-values (((return_103) #f) ((resume_107) #f) ((yield_104) (case-lambda ((value_109) (letrec*-values () (call-with-current-continuation (case-lambda ((cc_108) (letrec*-values () (set! resume_107 cc_108) (return_103 value_109)))))))))) (case-lambda (() (letrec*-values () (call-with-current-continuation (case-lambda ((cc_102) (letrec*-values () (set! return_103 cc_102) (if resume_107 (resume_107 #f) (begin (proc_105 yield_104) (set! resume_107 (case-lambda ((value_106) (letrec*-values () (return_103 (eof-object)))))) (return_103 (eof-object))))))))))))))) ((make-range-generator_112) (case-lambda ((start_111) (letrec*-values () (make-range-generator_112 start_111 +inf.0 1))) ((start_113 end_114) (letrec*-values () (make-range-generator_112 start_113 end_114 1))) ((start_115 end_120 step_119) (letrec*-values () (make-coroutine-generator_110 (case-lambda ((yield_118) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_116) (values (case-lambda ((value_117) (letrec*-values () (if (>= value_117 end_120) (if #f #f (if #f #f)) (begin (yield_118 value_117) (loop_116 (+ value_117 step_119)))))))))) ((case-lambda (() (letrec*-values () loop_116)))))))) start_115))))))))) ((gappend_127) (case-lambda (gen*_121 (letrec*-values () (make-coroutine-generator_110 (case-lambda ((yield_126) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_122) (values (case-lambda ((gen*_123) (letrec*-values () (if (null? gen*_123) (if #f #f (if #f #f)) (begin (((case-lambda (() (letrec*-values (((loop_124) (values (case-lambda ((value_125) (letrec*-values () (if (eof-object? value_125) (if #f #f (if #f #f)) (begin (yield_126 value_125) (loop_124 ((car gen*_123))))))))))) ((case-lambda (() (letrec*-values () loop_124)))))))) ((car gen*_123))) (loop_122 (cdr gen*_123)))))))))) ((case-lambda (() (letrec*-values () loop_122)))))))) gen*_121))))))))) ((generator-fold_137) (case-lambda ((proc_130 seed_128 . gen*_131) (letrec*-values () (call-with-current-continuation (case-lambda ((return_136) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_129) (values (case-lambda ((result_135) (letrec*-values () (loop_129 (apply proc_130 (((case-lambda (() (letrec*-values (((loop_132) (values (case-lambda ((gen*_133) (letrec*-values () (if (null? gen*_133) (list result_135) ((case-lambda ((value_134) (letrec*-values () (if (eof-object? value_134) (return_136 result_135) (cons value_134 (loop_132 (cdr gen*_133))))))) ((car gen*_133)))))))))) ((case-lambda (() (letrec*-values () loop_132)))))))) gen*_131))))))))) ((case-lambda (() (letrec*-values () loop_129)))))))) seed_128))))))))) ((generator->list_139) (case-lambda ((generator_138) (letrec*-values () (generator->list_139 generator_138 +inf.0))) ((generator_141 k_144) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_140) (values (case-lambda ((i_143) (letrec*-values () (if (= i_143 k_144) (quote ()) ((case-lambda ((value_142) (letrec*-values () (if (eof-object? value_142) (quote ()) (cons value_142 (loop_140 (+ i_143 1))))))) (generator_141))))))))) ((case-lambda (() (letrec*-values () loop_140)))))))) 0))))) ((box-type_145) (make-rtd (quote box-type) (quote value))) ((box_146) (rtd-constructor box-type_145 (quote value))) ((box?_147) (rtd-predicate box-type_145)) ((unbox_148) (rtd-accessor box-type_145 (quote value))) ((set-box!_149) (rtd-mutator box-type_145 (quote value))) ((<syntax>_150) (make-rtd (quote <syntax>) (quote datum) (quote source-location) (quote context) (quote aux))) ((make-syntax_151) (rtd-constructor <syntax>_150 (quote datum) (quote source-location) (quote context) (quote aux))) ((syntax?_152) (rtd-predicate <syntax>_150)) ((syntax-aux_153) (rtd-accessor <syntax>_150 (quote aux))) ((syntax-context_154) (rtd-accessor <syntax>_150 (quote context))) ((syntax-source-location_155) (rtd-accessor <syntax>_150 (quote source-location))) ((syntax-datum_156) (rtd-accessor <syntax>_150 (quote datum))) ((syntax-set-aux!_157) (rtd-mutator <syntax>_150 (quote aux))) ((syntax-set-context!_158) (rtd-mutator <syntax>_150 (quote context))) ((syntax-set-datum!_159) (rtd-mutator <syntax>_150 (quote datum))) ((syntax->datum_162) (case-lambda ((syntax_160) (letrec*-values () (syntax->datum_162 syntax_160 (case-lambda ((datum_161) (letrec*-values () datum_161)))))) ((syntax_168 proc_172) (letrec*-values (((syntax-stack_164) (quote ())) ((push-syntax!_167) (case-lambda ((syntax_166) (letrec*-values () (set! syntax-stack_164 (cons syntax_166 syntax-stack_164)))))) ((datum_165) (((case-lambda (() (letrec*-values (((syntax->datum_169) (values (case-lambda ((syntax_170) (letrec*-values () ((case-lambda ((temp_181) (letrec*-values () (if temp_181 ((case-lambda ((datum_182) (letrec*-values () datum_182))) temp_181) ((case-lambda ((datum_171) (letrec*-values () (if (vector? datum_171) (begin (push-syntax!_167 syntax_170) ((case-lambda ((n_177) (letrec*-values () ((case-lambda ((vector_178) (letrec*-values () ((case-lambda (() (letrec*-values () (syntax-set-aux!_157 syntax_170 vector_178) (((case-lambda (() (letrec*-values (((loop_179) (values (case-lambda ((i_180) (letrec*-values () (if (>= i_180 n_177) (if #f #f (if #f #f)) (begin (vector-set! vector_178 i_180 (syntax->datum_169 (vector-ref datum_171 i_180))) (loop_179 (+ i_180 1)))))))))) ((case-lambda (() (letrec*-values () loop_179)))))))) 0) vector_178))))))) (make-vector n_177))))) (vector-length datum_171))) (if (pair? datum_171) (begin (push-syntax!_167 syntax_170) ((case-lambda ((pair_173) (letrec*-values () ((case-lambda (() (letrec*-values () (syntax-set-aux!_157 syntax_170 pair_173) (set-car! pair_173 (syntax->datum_169 (car datum_171))) (((case-lambda (() (letrec*-values (((loop_174) (values (case-lambda ((datum_176 pair_175) (letrec*-values () (if (not (pair? (cdr datum_176))) (begin (if #f #f (if #f #f)) (if (not (null? (cdr datum_176))) (begin (set-cdr! pair_175 (syntax->datum_169 (cdr datum_176))) (if #f #f (if #f #f))) (if #f #f))) (begin (set-cdr! pair_175 (list (syntax->datum_169 (cadr datum_176)))) (loop_174 (cdr datum_176) (cdr pair_175)))))))))) ((case-lambda (() (letrec*-values () loop_174)))))))) datum_171 pair_173) pair_173))))))) (list #f))) (proc_172 datum_171)))))) (syntax-datum_156 syntax_170)))))) (syntax-aux_153 syntax_170)))))))) ((case-lambda (() (letrec*-values () syntax->datum_169)))))))) syntax_168))) (for-each (case-lambda ((syntax_163) (letrec*-values () (syntax-set-aux!_157 syntax_163 #f)))) syntax-stack_164) datum_165)))) ((derive-syntax_185) (case-lambda ((datum_183 syntax_184) (letrec*-values () (derive-syntax_185 datum_183 syntax_184 (syntax-context_154 syntax_184)))) ((datum_186 syntax_187 context_188) (letrec*-values () (make-syntax_151 datum_186 (syntax-source-location_155 syntax_187) context_188 #f))))) ((datum->syntax_190) (case-lambda ((datum_189) (letrec*-values () (make-syntax_151 datum_189 #f #f #f))))) ((with-input-from-file_197) (case-lambda ((string_196 thunk_194) (letrec*-values () (call-with-input-file (case-lambda ((port_192) (letrec*-values () ((case-lambda ((p_191) (letrec*-values () ((case-lambda ((old_195 new_193) (letrec*-values () (dynamic-wind (case-lambda (() (letrec*-values () (p_191 <param-set!>_7 new_193)))) (case-lambda (() (letrec*-values () thunk_194))) (case-lambda (() (letrec*-values () (p_191 <param-set!>_7 old_195)))))))) (p_191) ((p_191 <param-convert>_5) port_192))))) current-input-port_9))))))))) ((with-output-to-file_204) (case-lambda ((string_203 thunk_201) (letrec*-values () (call-with-output-file (case-lambda ((port_199) (letrec*-values () ((case-lambda ((p_198) (letrec*-values () ((case-lambda ((old_202 new_200) (letrec*-values () (dynamic-wind (case-lambda (() (letrec*-values () (p_198 <param-set!>_7 new_200)))) (case-lambda (() (letrec*-values () thunk_201))) (case-lambda (() (letrec*-values () (p_198 <param-set!>_7 old_202)))))))) (p_198) ((p_198 <param-convert>_5) port_199))))) current-output-port_10))))))))) ((<comparator>_205) (make-rtd (quote <comparator>) (quote type-test) (quote equality) (quote ordering) (quote hash))) ((%make-comparator_206) (rtd-constructor <comparator>_205 (quote type-test) (quote equality) (quote ordering) (quote hash))) ((comparator?_207) (rtd-predicate <comparator>_205)) ((comparator-hash-function_208) (rtd-accessor <comparator>_205 (quote hash))) ((comparator-ordering-predicate_209) (rtd-accessor <comparator>_205 (quote ordering))) ((comparator-equality-predicate_210) (rtd-accessor <comparator>_205 (quote equality))) ((comparator-type-test-predicate_211) (rtd-accessor <comparator>_205 (quote type-test))) ((make-comparator_219) (case-lambda ((type-test_212 equality_213 ordering_216 hash_218) (letrec*-values () (%make-comparator_206 type-test_212 equality_213 (if ordering_216 ordering_216 (case-lambda ((x_215 y_214) (letrec*-values () (error "ordering not supported"))))) (if hash_218 hash_218 (case-lambda ((x_217) (letrec*-values () (error "hashing not supported")))))))))) ((make-eq-comparator_221) (case-lambda (() (letrec*-values () (%make-comparator_206 (case-lambda ((obj_220) (letrec*-values () #t))) eq? #f #f))))) ((make-eqv-comparator_223) (case-lambda (() (letrec*-values () (%make-comparator_206 (case-lambda ((obj_222) (letrec*-values () #t))) eqv? #f #f))))) ((make-equal-comparator_225) (case-lambda (() (letrec*-values () (%make-comparator_206 (case-lambda ((obj_224) (letrec*-values () #t))) equal? #f #f))))) ((comparator-test-type_228) (case-lambda ((comparator_227 obj_226) (letrec*-values () ((comparator-type-test-predicate_211 comparator_227) obj_226))))) ((comparator-check-type_232) (case-lambda ((comparator_229 obj_230) (letrec*-values () ((case-lambda ((x_231) (letrec*-values () (if x_231 x_231 (error "comparator-check-type: invalid object" obj_230))))) (comparator-test-type_228 comparator_229 obj_230)))))) ((comparator-hash_235) (case-lambda ((comparator_234 obj_233) (letrec*-values () ((comparator-hash-function_208 comparator_234) obj_233))))) ((=?_246) (case-lambda ((comparator_245 obj1_236 obj2_237 . obj*_238) (letrec*-values (((equality_242) (comparator-equality-predicate_210 comparator_245))) (((case-lambda (() (letrec*-values (((loop_239) (values (case-lambda ((obj1_240 obj2_241 obj*_243) (letrec*-values () (if ((case-lambda ((x_244) (letrec*-values () (if x_244 x_244 (loop_239 obj2_241 (car obj*_243) (cdr obj*_243)))))) (null? obj*_243)) (equality_242 obj1_240 obj2_241) #f))))))) ((case-lambda (() (letrec*-values () loop_239)))))))) obj1_236 obj2_237 obj*_238))))) ((table-type_247) (make-rtd (quote table-type) (quote comparator) (quote entries))) ((%make-table_248) (rtd-constructor table-type_247 (quote comparator) (quote entries))) ((table?_249) (rtd-predicate table-type_247)) ((table-entries_250) (rtd-accessor table-type_247 (quote entries))) ((table-comparator_251) (rtd-accessor table-type_247 (quote comparator))) ((table-set-entries!_252) (rtd-mutator table-type_247 (quote entries))) ((make-table_254) (case-lambda ((comparator_253) (letrec*-values () (%make-table_248 comparator_253 (quote ())))))) ((table-equality-predicate_256) (case-lambda ((table_255) (letrec*-values () (comparator-equality-predicate_210 (table-comparator_251 table_255)))))) ((table-ref_259) (case-lambda ((table_257 key_258) (letrec*-values () (table-ref_259 table_257 key_258 (case-lambda (() (letrec*-values () (error "table-ref: not contained in hash table" key_258))))))) ((table_261 key_260 thunk_263) (letrec*-values (((equality_262) (table-equality-predicate_256 table_261))) ((case-lambda ((temp_264) (letrec*-values () (if temp_264 (cdr temp_264) (thunk_263))))) (assoc key_260 (table-entries_250 table_261) equality_262)))))) ((table-ref/default_268) (case-lambda ((table_265 key_266 default_267) (letrec*-values () (table-ref_259 table_265 key_266 (case-lambda (() (letrec*-values () default_267)))))))) ((table-set!_276) (case-lambda ((table_272 key_269 value_273) (letrec*-values (((equality_271) (table-equality-predicate_256 table_272)) ((entries_270) (table-entries_250 table_272))) ((case-lambda ((temp_274) (letrec*-values () (if temp_274 ((case-lambda ((entry_275) (letrec*-values () (set-cdr! entry_275 value_273)))) temp_274) (table-set-entries!_252 table_272 (cons (cons key_269 value_273) entries_270)))))) (assoc key_269 entries_270 equality_271)))))) ((table-update!_286) (case-lambda ((table_280 key_277 updater_282 failure_281 success_285) (letrec*-values (((equality_279) (table-equality-predicate_256 table_280)) ((entries_278) (table-entries_250 table_280))) ((case-lambda ((temp_283) (letrec*-values () (if temp_283 ((case-lambda ((entry_284) (letrec*-values () (set-cdr! entry_284 (updater_282 (success_285 (cdr entry_284))))))) temp_283) (table-set-entries!_252 table_280 (cons (cons key_277 (updater_282 (failure_281))) entries_278)))))) (assoc key_277 entries_278 equality_279)))))) ((table-intern!_294) (case-lambda ((table_291 key_287 failure_290) (letrec*-values (((equality_289) (table-equality-predicate_256 table_291)) ((entries_288) (table-entries_250 table_291))) ((case-lambda ((temp_293) (letrec*-values () (if temp_293 (cdr temp_293) ((case-lambda ((value_292) (letrec*-values () (table-set-entries!_252 table_291 (cons (cons key_287 value_292) entries_288)) value_292))) (failure_290)))))) (assoc key_287 entries_288 equality_289)))))) ((table-for-each_298) (case-lambda ((proc_296 table_297) (letrec*-values () (map (case-lambda ((entry_295) (letrec*-values () (proc_296 (car entry_295) (cdr entry_295))))) (table-entries_250 table_297)))))) ((table-keys_300) (case-lambda ((table_299) (letrec*-values () (map car (table-entries_250 table_299)))))) ((path-join_302) (case-lambda ((path_301 . path*_303) (letrec*-values () (if (null? path*_303) path_301 (string-append path_301 "/" (apply path-join_302 path*_303))))))) ((path-directory_308) (case-lambda ((path_304) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_305) (values (case-lambda ((index_306) (letrec*-values () (if ((case-lambda ((x_307) (letrec*-values () (if x_307 x_307 (char=? (string-ref path_304 index_306) #\/))))) (= index_306 -1)) (string-copy path_304 0 index_306) (loop_305 (- index_306 1))))))))) ((case-lambda (() (letrec*-values () loop_305)))))))) (- (string-length path_304) 1)))))) ((source-location-type_309) (make-rtd (quote source-location-type) (quote source) (quote start) (quote end))) ((make-source-location_310) (rtd-constructor source-location-type_309 (quote source) (quote start) (quote end))) ((source-location?_311) (rtd-predicate source-location-type_309)) ((source-location-end_312) (rtd-accessor source-location-type_309 (quote end))) ((source-location-start_313) (rtd-accessor source-location-type_309 (quote start))) ((source-location-source_314) (rtd-accessor source-location-type_309 (quote source))) ((make-position_317) (case-lambda ((line_315 column_316) (letrec*-values () (vector line_315 column_316))))) ((position-line_319) (case-lambda ((position_318) (letrec*-values () (vector-ref position_318 0))))) ((position-column_321) (case-lambda ((position_320) (letrec*-values () (vector-ref position_320 1))))) ((source-location-start-line_323) (case-lambda ((source-location_322) (letrec*-values () (position-line_319 (source-location-start_313 source-location_322)))))) ((source-location-start-column_325) (case-lambda ((source-location_324) (letrec*-values () (position-column_321 (source-location-start_313 source-location_324)))))) ((source-location-end-line_327) (case-lambda ((source-location_326) (letrec*-values () (position-line_319 (source-location-end_312 source-location_326)))))) ((source-location-end-column_329) (case-lambda ((source-location_328) (letrec*-values () (position-column_321 (source-location-end_312 source-location_328)))))) ((source-port-type_330) (make-rtd (quote source-port-type) (quote port) (quote source) (quote ci?) (quote line) (quote column))) ((%make-source-port_331) (rtd-constructor source-port-type_330 (quote port) (quote source) (quote ci?) (quote line) (quote column))) ((source-port?_332) (rtd-predicate source-port-type_330)) ((source-port-column_333) (rtd-accessor source-port-type_330 (quote column))) ((source-port-line_334) (rtd-accessor source-port-type_330 (quote line))) ((source-port-ci?_335) (rtd-accessor source-port-type_330 (quote ci?))) ((source-port-source_336) (rtd-accessor source-port-type_330 (quote source))) ((source-port-port_337) (rtd-accessor source-port-type_330 (quote port))) ((source-port-set-column!_338) (rtd-mutator source-port-type_330 (quote column))) ((source-port-set-line!_339) (rtd-mutator source-port-type_330 (quote line))) ((source-port-set-ci!_340) (rtd-mutator source-port-type_330 (quote ci?))) ((make-source-port_344) (case-lambda ((port_341 source_342 ci?_343) (letrec*-values () (%make-source-port_331 port_341 source_342 ci?_343 1 0))))) ((source-port-peek-char_346) (case-lambda ((source-port_345) (letrec*-values () (peek-char_15 (source-port-port_337 source-port_345)))))) ((source-port-read-char_349) (case-lambda ((source-port_347) (letrec*-values () ((case-lambda ((char_348) (letrec*-values () (if (eof-object? char_348) char_348 (begin (if (memv char_348 (quote (#\	))) (source-port-set-column!_338 source-port_347 (* (+ (quotient (source-port-column_333 source-port_347) 8) 1) 8)) (if (memv char_348 (quote (#\
))) (begin (source-port-set-column!_338 source-port_347 0) (source-port-set-line!_339 source-port_347 (+ (source-port-line_334 source-port_347) 1))) (if (memv char_348 (quote (#\))) (source-port-set-column!_338 source-port_347 0) (source-port-set-column!_338 source-port_347 (+ (source-port-column_333 source-port_347) 1))))) char_348))))) (read-char_13 (source-port-port_337 source-port_347))))))) ((source-port-fold-case!_351) (case-lambda ((source-port_350) (letrec*-values () (source-port-set-ci!_340 source-port_350 #t))))) ((source-port-no-fold-case!_353) (case-lambda ((source-port_352) (letrec*-values () (source-port-set-ci!_340 source-port_352 #f))))) ((source-port-position_355) (case-lambda ((source-port_354) (letrec*-values () (make-position_317 (source-port-line_334 source-port_354) (source-port-column_333 source-port_354)))))) ((source-port-make-location_359) (case-lambda ((source-port_356 start_357 end_358) (letrec*-values () (make-source-location_310 (source-port-source_336 source-port_356) start_357 end_358))))) ((read-error-object-type_360) (make-rtd (quote read-error-object-type) (quote message) (quote location))) ((make-read-error-object_361) (rtd-constructor read-error-object-type_360 (quote message) (quote location))) ((read-error-object?_362) (rtd-predicate read-error-object-type_360)) ((read-error-object-location_363) (rtd-accessor read-error-object-type_360 (quote location))) ((read-error-object-message_364) (rtd-accessor read-error-object-type_360 (quote message))) ((read-error_367) (case-lambda ((message_365 location_366) (letrec*-values () (raise (make-read-error-object_361 message_365 location_366)))))) ((locate-file_372) (case-lambda ((filename_369 syntax_368) (letrec*-values () ((case-lambda ((temp_370) (letrec*-values () (if temp_370 ((case-lambda ((source-location_371) (letrec*-values () (path-join_302 (path-directory_308 (source-location-source_314 source-location_371)) filename_369)))) temp_370) filename_369)))) (if syntax_368 (syntax-source-location_155 syntax_368) #f)))))) ((read-file_382) (case-lambda ((source_373 ci?_381 syntax_378) (letrec*-values () (make-coroutine-generator_110 (case-lambda ((yield_376) (letrec*-values () (call-with-input-file source_373 (case-lambda ((port_380) (letrec*-values (((source-port_377) (make-source-port_344 port_380 source_373 ci?_381))) (((case-lambda (() (letrec*-values (((loop_374) (values (case-lambda (() (letrec*-values (((datum-syntax_375) (read-syntax_379 source-port_377 syntax_378))) (if (not (eof-object? datum-syntax_375)) (begin (yield_376 datum-syntax_375) (loop_374) (if #f #f (if #f #f))) (if #f #f)))))))) ((case-lambda (() (letrec*-values () loop_374))))))))))))))))))))) ((read-syntax_379) (case-lambda ((source-port_398 context_408) (letrec*-values (((read_399) (case-lambda (() (letrec*-values () (source-port-read-char_349 source-port_398))))) ((peek_400) (case-lambda (() (letrec*-values () (source-port-peek-char_346 source-port_398))))) ((position_401) (case-lambda (() (letrec*-values () (source-port-position_355 source-port_398))))) ((make-location_404) (case-lambda ((start_402 end_403) (letrec*-values () (source-port-make-location_359 source-port_398 start_402 end_403))))) ((make-syntax_409) (case-lambda ((datum_405 start_406 end_407) (letrec*-values () (make-syntax_151 datum_405 (make-location_404 start_406 end_407) context_408 #f))))) ((syntax-start_391) (case-lambda ((syntax_410) (letrec*-values () (source-location-start_313 (syntax-source-location_155 syntax_410)))))) ((syntax-end_392) (case-lambda ((syntax_411) (letrec*-values () (source-location-end_312 (syntax-source-location_155 syntax_411)))))) ((error_393) (case-lambda ((message_412 start_413 end_414) (letrec*-values () (read-error_367 message_412 (make-location_404 start_413 end_414)))))) ((start_415) (position_401)) ((seen?_416) #f) ((seen!_417) (case-lambda (() (letrec*-values () (set! seen?_416 #t))))) ((set-start!_418) (case-lambda (() (letrec*-values () (if (not seen?_416) (begin (set! start_415 (position_401)) (if #f #f (if #f #f))) (if #f #f)))))) ((fold-case?_419) (case-lambda (() (letrec*-values () (source-port-ci?_335 source-port_398))))) ((maybe-foldcase_421) (case-lambda ((string_420) (letrec*-values () (if (fold-case?_419) (string-foldcase string_420) string_420))))) ((read-token_424) (case-lambda (() (letrec*-values () (list->string (((case-lambda (() (letrec*-values (((loop_422) (values (case-lambda (() (letrec*-values (((c_423) (peek_400))) (if (memv c_423 (quote (#\  #\	 #\
 #\ #\| #\( #\) #\" #\;))) (quote ()) (begin (read_399) (if (eof-object? c_423) (quote ()) (cons c_423 (loop_422))))))))))) ((case-lambda (() (letrec*-values () loop_422)))))))))))))) ((read-inline-hex-escape_430) (case-lambda (() (letrec*-values (((string_425) (((case-lambda (() (letrec*-values (((loop_427) (values (case-lambda (() (letrec*-values (((c_429) (read_399))) (if (eof-object? c_429) (begin (unexpected-end-of-file-error_428) (if #f #f (if #f #f))) (if #f #f)) (if (char=? c_429 #\;) (quote ()) (cons c_429 (loop_427))))))))) ((case-lambda (() (letrec*-values () loop_427))))))))))) (integer->char (hex-scalar-value_426 (list->string string_425) start_415)))))) ((skip-intraline-white-space!_433) (case-lambda (() (letrec*-values () (((case-lambda (() (letrec*-values (((loop_431) (values (case-lambda (() (letrec*-values () ((case-lambda ((atom-key_432) (letrec*-values () (if (memv atom-key_432 (quote (#\  #\	))) (begin (read_399) (loop_431)) (if #f #f))))) (peek_400)))))))) ((case-lambda (() (letrec*-values () loop_431))))))))))))) ((skip-newline-after-return!_434) (case-lambda (() (letrec*-values () (if (eq? (peek_400) #\
) (begin (read_399) (if #f #f (if #f #f))) (if #f #f)))))) ((string->identifier_469) (case-lambda ((string_435) (letrec*-values (((letter?_446) (case-lambda ((c_444) (letrec*-values () ((case-lambda ((x_445) (letrec*-values () (if x_445 x_445 (char<=? #\a c_444 #\z))))) (char<=? #\A c_444 #\Z)))))) ((special-initial?_448) (case-lambda ((c_447) (letrec*-values () (if (member c_447 (quote (#\! #\$ #\% #\& #\* #\/ #\: #\< #\= #\> #\? #\^ #\_ #\~ #\@)) char=?) #t #f))))) ((initial?_443) (case-lambda ((c_449) (letrec*-values () ((case-lambda ((x_450) (letrec*-values () (if x_450 x_450 (special-initial?_448 c_449))))) (letter?_446 c_449)))))) ((digit?_452) (case-lambda ((c_451) (letrec*-values () (char<=? #\0 c_451 #\9))))) ((special-subsequent?_456) (case-lambda ((c_453) (letrec*-values () ((case-lambda ((x_455) (letrec*-values () (if x_455 x_455 ((case-lambda ((x_454) (letrec*-values () (if x_454 x_454 (char=? c_453 #\@))))) (char=? c_453 #\.)))))) (explicit-sign?_442 c_453)))))) ((subsequent?_460) (case-lambda ((c_457) (letrec*-values () ((case-lambda ((x_459) (letrec*-values () (if x_459 x_459 ((case-lambda ((x_458) (letrec*-values () (if x_458 x_458 (special-subsequent?_456 c_457))))) (digit?_452 c_457)))))) (initial?_443 c_457)))))) ((explicit-sign?_442) (case-lambda ((c_461) (letrec*-values () ((case-lambda ((x_462) (letrec*-values () (if x_462 x_462 (char=? c_461 #\-))))) (char=? c_461 #\+)))))) ((dot-subsequent?_437) (case-lambda ((c_463) (letrec*-values () ((case-lambda ((x_464) (letrec*-values () (if x_464 x_464 (char=? c_463 #\.))))) (sign-subsequent?_440 c_463)))))) ((sign-subsequent?_440) (case-lambda ((c_465) (letrec*-values () ((case-lambda ((x_467) (letrec*-values () (if x_467 x_467 ((case-lambda ((x_466) (letrec*-values () (if x_466 x_466 (char=? c_465 #\@))))) (explicit-sign?_442 c_465)))))) (initial?_443 c_465)))))) ((identifier_441) (case-lambda (() (letrec*-values () (string->symbol (maybe-foldcase_421 string_435)))))) ((n_438) (string-length string_435)) ((parse-subsequent_436) (case-lambda ((i_468) (letrec*-values () (if (>= i_468 n_438) (identifier_441) (if (subsequent?_460 (string-ref string_435 i_468)) (parse-subsequent_436 (+ i_468 1)) #f))))))) (if (> n_438 0) ((case-lambda ((c_439) (letrec*-values () (if (initial?_443 c_439) (parse-subsequent_436 1) (if (explicit-sign?_442 c_439) (if (= n_438 1) (identifier_441) (if (sign-subsequent?_440 (string-ref string_435 1)) (parse-subsequent_436 2) (if (char=? (string-ref string_435 1) #\.) (if (>= n_438 3) (if (dot-subsequent?_437 (string-ref string_435 2)) (parse-subsequent_436 3) #f) #f) (if (char=? c_439 #\.) (if (dot-subsequent?_437 (string-ref string_435 1)) (parse-subsequent_436 2) #f) #f)))) (if (if (char=? c_439 #\.) (if (>= n_438 1) (dot-subsequent?_437 (string-ref string_435 1)) #f) #f) (parse-subsequent_436 2) #f)))))) (string-ref string_435 0)) #f))))) ((read-string_481) (case-lambda ((delimiter_473) (letrec*-values (((list_470) (((case-lambda (() (letrec*-values (((loop_471) (values (case-lambda (() (letrec*-values () ((case-lambda ((start_476) (letrec*-values (((c_472) (read_399))) (if (eof-object? c_472) (begin (unexpected-end-of-file-error_428) (if #f #f (if #f #f))) (if #f #f)) (if (memv c_472 (quote (#\))) (begin (skip-newline-after-return!_434) (cons #\
 (loop_471))) (if (memv c_472 (quote (#\\))) (begin (if (eof-object? c_472) (begin (unexpected-end-of-file-error_428) (if #f #f (if #f #f))) (if #f #f)) ((case-lambda ((c_474) (letrec*-values () ((case-lambda ((temp_479) (letrec*-values () (if temp_479 ((case-lambda ((escape-sequence_480) (letrec*-values () (cons (cdr escape-sequence_480) (loop_471))))) temp_479) (if (char=? c_474 #\x) ((case-lambda ((c_478) (letrec*-values () (cons c_478 (loop_471))))) (read-inline-hex-escape_430)) (if (member c_474 (quote (#\  #\	 #\
 #\)) char=?) (begin (if (eq? delimiter_473 #\|) (begin (error_393 "bad escape sequence" start_476 (position_401)) (if #f #f (if #f #f))) (if #f #f)) (skip-intraline-white-space!_433) ((case-lambda ((atom-key_477) (letrec*-values () (if (memv atom-key_477 (quote (#\
))) (read_399) (if (memv atom-key_477 (quote (#\))) (skip-newline-after-return!_434) (error_393 "line ending expected" start_476 (position_401))))))) (peek_400)) (skip-intraline-white-space!_433) (loop_471)) (error_393 "bad escape sequence" start_476 (position_401)))))))) (assoc c_474 escape-sequences_475 char=?))))) (read_399))) (if (char=? c_472 delimiter_473) (quote ()) (cons c_472 (loop_471)))))))) (position_401)))))))) ((case-lambda (() (letrec*-values () loop_471))))))))))) (list->string list_470))))) ((hex-scalar-value_426) (case-lambda ((string_485 start_482) (letrec*-values (((n_483) (string-length string_485))) (if (not (> n_483 0)) (begin (error_393 "bad hex scalar value" start_482 (position_401)) (if #f #f (if #f #f))) (if #f #f)) (((case-lambda (() (letrec*-values (((loop_484) (values (case-lambda ((i_486 value_488) (letrec*-values () (if (= i_486 n_483) value_488 ((case-lambda ((n_487) (letrec*-values () ((case-lambda ((d_489) (letrec*-values () ((case-lambda (() (letrec*-values () (loop_484 (+ i_486 1) (+ (* value_488 16) d_489))))))))) (if (if (>= n_487 48) (<= n_487 57) #f) (- n_487 48) (if (if (>= n_487 65) (<= n_487 70) #f) (- n_487 (- 65 10)) (if (if (>= n_487 97) (<= n_487 102) #f) (- n_487 (- 97 10)) (error_393 "invalid hex digit" start_482 (position_401))))))))) (char->integer (string-ref string_485 i_486)))))))))) ((case-lambda (() (letrec*-values () loop_484)))))))) 0 0))))) ((digit-value_491) (case-lambda ((char_490) (letrec*-values () (if (char<=? #\0 char_490 #\9) (- (char->integer char_490) 48) #f))))) ((character-names_492) (quote (("alarm" . #\) ("backspace" . #\) ("delete" . #\) ("escape" . #\) ("newline" . #\
) ("null" . #\ ) ("return" . #\) ("space" . #\ ) ("tab" . #\	)))) ((escape-sequences_475) (quote ((#\a . #\) (#\b . #\) (#\t . #\	) (#\n . #\
) (#\r . #\) (#\" . #\") (#\\ . #\\) (#\| . #\|)))) ((references_493) (make-table_254 (make-eq-comparator_221))) ((declarations_383) (quote ())) ((reference-type_494) (make-rtd (quote reference-type) (quote uses))) ((%make-reference_495) (rtd-constructor reference-type_494 (quote uses))) ((reference?_395) (rtd-predicate reference-type_494)) ((reference-uses_390) (rtd-accessor reference-type_494 (quote uses))) ((reference-set-uses!_394) (rtd-mutator reference-type_494 (quote uses))) ((make-reference_496) (case-lambda (() (letrec*-values () (%make-reference_495 (quote ())))))) ((unexpected-end-of-file-error_428) (case-lambda (() (letrec*-values () (error_393 "unexpected end of file" (position_401) (position_401)))))) ((syntax_397) (((case-lambda (() (letrec*-values (((%read-syntax_497) (values (case-lambda ((allowed-tokens_504) (letrec*-values (((start_499) (position_401)) ((read-syntax_545) (case-lambda (() (letrec*-values () (%read-syntax_497 allowed-tokens_504))))) ((abbreviation_548) (case-lambda ((identifier_568 start_567) (letrec*-values (((syntax_565) (make-syntax_409 identifier_568 start_567 (position_401))) ((datum-syntax_566) (read-syntax_545))) (make-syntax_409 (list syntax_565 datum-syntax_566) start_567 (position_401)))))) ((c_506) (peek_400))) (if (eof-object? c_506) (if (memq (quote eof-object) allowed-tokens_504) c_506 (unexpected-end-of-file-error_428)) (if (memv c_506 (quote (#\  #\	 #\
 #\))) (begin (read_399) (set-start!_418) (read-syntax_545)) (if (memv c_506 (quote (#\;))) (begin (read_399) (((case-lambda (() (letrec*-values (((loop_561) (values (case-lambda (() (letrec*-values (((c_562) (read_399))) (if (not ((case-lambda ((x_564) (letrec*-values () (if x_564 x_564 ((case-lambda ((x_563) (letrec*-values () (if x_563 x_563 (char=? c_562 #\
))))) (char=? c_562 #\)))))) (eof-object? c_562))) (begin (loop_561) (if #f #f (if #f #f))) (if #f #f)))))))) ((case-lambda (() (letrec*-values () loop_561))))))))) (set-start!_418) (read-syntax_545)) (if (memv c_506 (quote (#\())) ((case-lambda ((start_559) (letrec*-values () (read_399) (((case-lambda (() (letrec*-values (((loop_551) (values (case-lambda ((datum*_553) (letrec*-values (((datum_552) (%read-syntax_497 (quote (closing-parenthesis dot))))) (if (memv datum_552 (quote (closing-parenthesis))) (make-syntax_409 (reverse datum*_553) start_559 (position_401)) (if (memv datum_552 (quote (dot))) ((case-lambda ((dot-position_557) (letrec*-values () ((case-lambda ((dotted-list_558) (letrec*-values () ((case-lambda (() (letrec*-values () ((case-lambda ((atom-key_560) (letrec*-values () (if (memv atom-key_560 (quote (closing-parenthesis))) (make-syntax_409 dotted-list_558 start_559 (position_401)) (error_393 "expected end of list after dot" dot-position_557 (position_401)))))) (%read-syntax_497 (quote (closing-parenthesis))))))))))) ((case-lambda ((rest_554) (letrec*-values () ((case-lambda ((datum_555) (letrec*-values () ((case-lambda (() (letrec*-values () (append (reverse datum*_553) (if ((case-lambda ((x_556) (letrec*-values () (if x_556 x_556 (null? datum_555))))) (list? datum_555)) datum_555 rest_554))))))))) (syntax-datum_156 rest_554))))) (%read-syntax_497 (quote ()))))))) (position_401)) (loop_551 (cons datum_552 datum*_553)))))))))) ((case-lambda (() (letrec*-values () loop_551)))))))) (quote ()))))) (position_401)) (if (memv c_506 (quote (#\'))) ((case-lambda ((start_550) (letrec*-values () (read_399) (abbreviation_548 (quote quote) start_550)))) (position_401)) (if (memv c_506 (quote (#\`))) ((case-lambda ((start_549) (letrec*-values () (read_399) (abbreviation_548 (quote quasiquote) start_549)))) (position_401)) (if (memv c_506 (quote (#\,))) ((case-lambda ((start_547) (letrec*-values () (read_399) (if (char=? (peek_400) #\@) (begin (read_399) (abbreviation_548 (quote unquote-splicing) start_547)) (abbreviation_548 (quote unquote) start_547))))) (position_401)) (if (memv c_506 (quote (#\)))) ((case-lambda ((start_546) (letrec*-values () (read_399) (if (memq (quote closing-parenthesis) allowed-tokens_504) (quote closing-parenthesis) (error_393 "too many ')'s" start_546 (position_401)))))) (position_401)) (if (memv c_506 (quote (#\#))) ((case-lambda ((start_508) (letrec*-values () (read_399) (if (eof-object? (peek_400)) (begin (unexpected-end-of-file-error_428) (if #f #f (if #f #f))) (if #f #f)) ((case-lambda ((atom-key_524) (letrec*-values () (if (memv atom-key_524 (quote (#\;))) (begin (read_399) (read-syntax_545) (set-start!_418) (read-syntax_545)) (if (memv atom-key_524 (quote (#\|))) (begin (read_399) (((case-lambda (() (letrec*-values (((loop_541) (values (case-lambda ((level_543) (letrec*-values () (if (> level_543 0) (begin ((case-lambda ((c_542) (letrec*-values () (if (eof-object? c_542) (begin (unexpected-end-of-file-error_428) (if #f #f (if #f #f))) (if #f #f)) ((case-lambda ((s_544) (letrec*-values () (if (string=? s_544 "#|") (begin (read_399) (loop_541 (+ level_543 1))) (if (string=? s_544 "|#") (begin (read_399) (loop_541 (- level_543 1))) (loop_541 level_543)))))) (string c_542 (peek_400)))))) (read_399)) (if #f #f (if #f #f))) (if #f #f)))))))) ((case-lambda (() (letrec*-values () loop_541)))))))) 1) (set-start!_418) (read-syntax_545)) (if (memv atom-key_524 (quote (#\!))) (begin (read_399) ((case-lambda ((token_540) (letrec*-values () (if (string-ci=? token_540 "fold-case") (source-port-fold-case!_351 #t) (if (string-ci=? token_540 "no-fold-case") (source-port-no-fold-case!_353 #f) (error_393 "invalid directive" start_508 (position_401)))) (set-start!_418) (read-token_424)))) (read-token_424))) (if (memv atom-key_524 (quote (#\t #\f #\T #\F))) (begin (seen!_417) ((case-lambda ((token_537) (letrec*-values () (if ((case-lambda ((x_539) (letrec*-values () (if x_539 x_539 (string-ci=? token_537 "true"))))) (string-ci=? token_537 "t")) (make-syntax_409 #t start_508 (position_401)) (if ((case-lambda ((x_538) (letrec*-values () (if x_538 x_538 (string-ci=? token_537 "false"))))) (string-ci=? token_537 "f")) (make-syntax_409 #f start_508 (position_401)) (error_393 "invalid constant" start_508 (position_401))))))) (read-token_424))) (if (memv atom-key_524 (quote (#\\))) (begin (seen!_417) (read_399) ((case-lambda ((token_532) (letrec*-values (((n_535) (string-length token_532))) (if (memv n_535 (quote (0))) ((case-lambda ((c_536) (letrec*-values () (if (eof-object? c_536) (begin (unexpected-end-of-file-error_428) (if #f #f (if #f #f))) (if #f #f)) (make-syntax_409 c_536 start_508 (position_401))))) (read_399)) (if (memv n_535 (quote (1))) (make-syntax_409 (string-ref token_532 0) start_508 (position_401)) ((case-lambda ((temp_533) (letrec*-values () (if temp_533 ((case-lambda ((character-name_534) (letrec*-values () (make-syntax_409 (cdr character-name_534) start_508 (position_401))))) temp_533) (begin (if (not (char=? (string-ref token_532 0) #\x)) (begin (error_393 "bad character" start_508 (position_401)) (if #f #f (if #f #f))) (if #f #f)) (make-syntax_409 (integer->char (hex-scalar-value_426 (string-copy token_532 1) start_508)) start_508 (position_401))))))) (assoc token_532 character-names_492 (if (fold-case?_419) string-ci=? string=?)))))))) (read-token_424))) (if (memv atom-key_524 (quote (#\())) (begin (seen!_417) (read_399) (((case-lambda (() (letrec*-values (((loop_529) (values (case-lambda ((datum*_531) (letrec*-values (((datum_530) (%read-syntax_497 (quote (closing-parenthesis))))) (if (memv datum_530 (quote (closing-parenthesis))) (make-syntax_409 (list->vector (reverse datum*_531)) start_508 (position_401)) (loop_529 (cons datum_530 datum*_531))))))))) ((case-lambda (() (letrec*-values () loop_529)))))))) (quote ()))) (if (memv atom-key_524 (quote (#\u))) (begin (seen!_417) (if (not (string-ci=? (read-token_424) "u8")) (begin (error_393 "invalid sharp token" start_508 (position_401)) (if #f #f (if #f #f))) (if #f #f)) (if (not (char=? (peek_400) #\()) (begin (error_393 "'(' expected" start_508 (position_401)) (if #f #f (if #f #f))) (if #f #f)) (read_399) (((case-lambda (() (letrec*-values (((loop_525) (values (case-lambda ((byte*_528) (letrec*-values (((datum_526) (%read-syntax_497 (quote (closing-parenthesis))))) (if (memv datum_526 (quote (closing-parenthesis))) (make-syntax_409 (apply bytevector (reverse byte*_528)) start_508 (position_401)) ((case-lambda ((byte_527) (letrec*-values () (if (not (if (exact-integer? byte_527) (<= 0 byte_527 255) #f)) (begin (error_393 "not a byte " (syntax-start_391 datum_526) (syntax-end_392 datum_526)) (if #f #f (if #f #f))) (if #f #f)) (loop_525 (cons byte_527 byte*_528))))) (syntax-datum_156 datum_526))))))))) ((case-lambda (() (letrec*-values () loop_525)))))))) (quote ()))) (if (memv atom-key_524 (quote (#\e #\i #\d #\b #\o #\x))) (begin (seen!_417) ((case-lambda ((temp_522) (letrec*-values () (if temp_522 ((case-lambda ((number_523) (letrec*-values () (make-syntax_409 number_523 start_508 (position_401))))) temp_522) (error_393 "bad number" start_508 (position_401)))))) (string->number (string-append "#" (read-token_424))))) (begin (seen!_417) (if (not (digit-value_491 (peek_400))) (begin (error_393 "invalid sharp syntax" start_508 (position_401)) (if #f #f (if #f #f))) (if #f #f)) ((case-lambda ((label_517) (letrec*-values () ((case-lambda ((atom-key_518) (letrec*-values () (if (memv atom-key_518 (quote (#\=))) (begin (read_399) ((case-lambda (() (letrec*-values (((reference_519) (make-reference_496)) ((declaration_520) (cons #f reference_519))) (table-set!_276 references_493 label_517 reference_519) (set! declarations_383 (cons declaration_520 declarations_383)) ((case-lambda ((syntax_521) (letrec*-values () (set-car! declaration_520 syntax_521) syntax_521))) (%read-syntax_497 (quote ())))))))) (if (memv atom-key_518 (quote (#\#))) (begin (read_399) ((case-lambda (() (letrec*-values (((unknown-reference-error_516) (case-lambda (() (letrec*-values () (error_393 "unknown reference" start_508 (position_401)))))) ((reference_514) (table-ref_259 references_493 label_517 unknown-reference-error_516)) ((syntax_515) (make-syntax_409 reference_514 start_508 (position_401)))) (reference-set-uses!_394 reference_514 (cons syntax_515 (reference-uses_390 reference_514))) syntax_515))))) (error_393 "bad label datum" start_508 (position_401))))))) (peek_400))))) (((case-lambda (() (letrec*-values (((loop_509) (values (case-lambda ((value_511) (letrec*-values (((c_510) (peek_400))) ((case-lambda ((temp_512) (letrec*-values () (if temp_512 ((case-lambda ((n_513) (letrec*-values () (read_399) (loop_509 (+ (* 10 value_511) n_513))))) temp_512) value_511)))) (digit-value_491 c_510)))))))) ((case-lambda (() (letrec*-values () loop_509)))))))) 0)))))))))))))) (peek_400))))) (position_401)) (if (memv c_506 (quote (#\"))) (begin (seen!_417) (read_399) ((case-lambda ((string_507) (letrec*-values () (make-syntax_409 string_507 start_499 (position_401))))) (read-string_481 #\"))) (if (memv c_506 (quote (#\|))) (begin (seen!_417) (read_399) ((case-lambda ((identifier_505) (letrec*-values () (make-syntax_409 identifier_505 start_499 (position_401))))) (string->symbol (maybe-foldcase_421 (read-string_481 #\|))))) (begin (seen!_417) ((case-lambda ((token_498) (letrec*-values () (if (string=? token_498 ".") (begin (read_399) (if (memq (quote dot) allowed-tokens_504) (quote dot) (error_393 "unexpected '.'" start_499 (position_401)))) ((case-lambda ((temp_502) (letrec*-values () (if temp_502 ((case-lambda ((number_503) (letrec*-values () (make-syntax_409 number_503 start_499 (position_401))))) temp_502) ((case-lambda ((temp_500) (letrec*-values () (if temp_500 ((case-lambda ((identifier_501) (letrec*-values () (make-syntax_409 identifier_501 start_499 (position_401))))) temp_500) (error_393 "bad token" start_499 (position_401)))))) (string->identifier_469 token_498)))))) (string->number token_498)))))) (read-token_424)))))))))))))))))))) ((case-lambda (() (letrec*-values () %read-syntax_497)))))))) (quote (eof-object))))) (((case-lambda (() (letrec*-values (((loop_384) (values (case-lambda ((declarations_385) (letrec*-values () (if (null? declarations_385) syntax_397 ((case-lambda ((syntax_386) (letrec*-values () ((case-lambda ((datum_388) (letrec*-values () ((case-lambda ((reference_389) (letrec*-values () ((case-lambda ((declarations_396) (letrec*-values () ((case-lambda (() (letrec*-values () (if (reference?_395 datum_388) (begin (if (eq? reference_389 datum_388) (begin (error_393 "self label reference" (syntax-start_391 syntax_386) (syntax-end_392 syntax_386)) (if #f #f (if #f #f))) (if #f #f)) (reference-set-uses!_394 datum_388 (append (reference-uses_390 reference_389) (reference-uses_390 datum_388)))) (for-each (case-lambda ((use_387) (letrec*-values () (syntax-set-datum!_159 use_387 datum_388)))) (reference-uses_390 reference_389))) (loop_384 declarations_396)))))))) (cdr declarations_385))))) (cdar declarations_385))))) (syntax-datum_156 syntax_386))))) (caar declarations_385))))))))) ((case-lambda (() (letrec*-values () loop_384)))))))) declarations_383))))) ((<compile-error-object>_569) (make-rtd (quote <compile-error-object>) (quote type) (quote message) (quote syntax))) ((make-compile-error-object_570) (rtd-constructor <compile-error-object>_569 (quote type) (quote message) (quote syntax))) ((compile-error-object?_571) (rtd-predicate <compile-error-object>_569)) ((compile-error-object-syntax_572) (rtd-accessor <compile-error-object>_569 (quote syntax))) ((compile-error-object-message_573) (rtd-accessor <compile-error-object>_569 (quote message))) ((compile-error-object-type_574) (rtd-accessor <compile-error-object>_569 (quote type))) ((make-note_577) (case-lambda ((message_575 syntax_576) (letrec*-values () (vector message_575 syntax_576))))) ((note-message_579) (case-lambda ((note_578) (letrec*-values () (vector-ref note_578 0))))) ((note-syntax_581) (case-lambda ((note_580) (letrec*-values () (vector-ref note_580 1))))) ((current-notes_582) (make-parameter_2 #f box_146)) ((%get-notes_583) (case-lambda (() (letrec*-values () (unbox_148 (current-notes_582)))))) ((get-notes!_585) (case-lambda (() (letrec*-values (((notes_584) (reverse (%get-notes_583)))) (set-box!_149 (current-notes_582) (quote ())) notes_584)))) ((append-note!_588) (case-lambda ((message_586 syntax_587) (letrec*-values () (set-box!_149 (current-notes_582) (cons (make-note_577 message_586 syntax_587) (%get-notes_583))))))) ((compile-error_591) (case-lambda ((message_589 syntax_590) (letrec*-values () (raise (make-compile-error-object_570 (quote error) message_589 syntax_590)))))) ((compile-warning_594) (case-lambda ((message_592 syntax_593) (letrec*-values () (raise-continuable (make-compile-error-object_570 (quote warning) message_592 syntax_593)))))) ((compile-note_597) (case-lambda ((message_595 syntax_596) (letrec*-values () (append-note!_588 message_595 syntax_596))))) ((compile-error?_599) (case-lambda ((object_598) (letrec*-values () (if (compile-error-object?_571 object_598) (eq? (compile-error-object-type_574 object_598) (quote error)) #f))))) ((compile-warning?_601) (case-lambda ((object_600) (letrec*-values () (if (compile-error-object?_571 object_600) (eq? (compile-error-object-type_574 object_600) (quote warning)) #f))))) ((display-source-location_604) (case-lambda ((source-location_603) (letrec*-values (((source_602) (source-location-source_314 source-location_603))) (if source_602 (begin (display_80 source_602) (display_80 ":") (display_80 (source-location-start-line_323 source-location_603)) (display_80 ".") (display_80 (+ (source-location-start-column_325 source-location_603) 1)) (display_80 "-") (if (not (= (source-location-start-line_323 source-location_603) (source-location-end-line_327 source-location_603))) (begin (display_80 (source-location-end-line_327 source-location_603)) (display_80 ".") (if #f #f (if #f #f))) (if #f #f)) (display_80 (source-location-end-column_329 source-location_603)) (display_80 ": ") (if #f #f (if #f #f))) (if #f #f)))))) ((display-context_608) (case-lambda ((syntax_605) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_606) (values (case-lambda ((syntax_607) (letrec*-values () (if (not syntax_607) (if #f #f (if #f #f)) (begin (display-source-location_604 (syntax-source-location_155 syntax_607)) (display_80 "  used from here") (newline_44) (loop_606 (syntax-context_154 syntax_607)))))))))) ((case-lambda (() (letrec*-values () loop_606)))))))) (syntax-context_154 syntax_605)))))) ((display-compile-error_620) (case-lambda ((compile-error-object_612) (letrec*-values (((syntax_611) (compile-error-object-syntax_572 compile-error-object_612))) ((case-lambda ((p_609) (letrec*-values () ((case-lambda ((old_619 new_610) (letrec*-values () (dynamic-wind (case-lambda (() (letrec*-values () (p_609 <param-set!>_7 new_610)))) (case-lambda (() (letrec*-values () (if syntax_611 (begin (display-source-location_604 (syntax-source-location_155 syntax_611)) (if #f #f (if #f #f))) (if #f #f)) ((case-lambda ((atom-key_613) (letrec*-values () (if (memv atom-key_613 (quote (error))) (display_80 "error: ") (if (memv atom-key_613 (quote (warning))) (display_80 "warning: ") ((case-lambda ((type_614) (letrec*-values () (error "invalid compile error type" type_614)))) atom-key_613)))))) (compile-error-object-type_574 compile-error-object_612)) (display_80 (compile-error-object-message_573 compile-error-object_612)) (newline_44) (display-context_608 syntax_611) (((case-lambda (() (letrec*-values (((loop_615) (values (case-lambda ((notes_616) (letrec*-values () (if (null? notes_616) (if #f #f (if #f #f)) (begin ((case-lambda ((note_617) (letrec*-values () ((case-lambda ((syntax_618) (letrec*-values () ((case-lambda (() (letrec*-values () (display-source-location_604 (syntax-source-location_155 syntax_618)) (display_80 "note: ") (display_80 (note-message_579 note_617)) (newline_44) (display-context_608 syntax_618)))))))) (note-syntax_581 note_617))))) (car notes_616)) (loop_615 (cdr notes_616)))))))))) ((case-lambda (() (letrec*-values () loop_615)))))))) (get-notes!_585))))) (case-lambda (() (letrec*-values () (p_609 <param-set!>_7 old_619)))))))) (p_609) ((p_609 <param-convert>_5) (current-error-port_11)))))) current-output-port_10))))) ((cons*_626) (case-lambda ((element_621 . element*_622) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_623) (values (case-lambda ((element_624 element*_625) (letrec*-values () (if (null? element*_625) element_624 (cons element_624 (loop_623 (car element*_625) (cdr element*_625)))))))))) ((case-lambda (() (letrec*-values () loop_623)))))))) element_621 element*_622))))) ((take_632) (case-lambda ((list_627 k_628) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_629) (values (case-lambda ((list_630 k_631) (letrec*-values () (if (zero? k_631) (quote ()) (cons (car list_630) (loop_629 (cdr list_630) (- k_631 1)))))))))) ((case-lambda (() (letrec*-values () loop_629)))))))) list_627 k_628))))) ((drop_638) (case-lambda ((list_633 k_634) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_635) (values (case-lambda ((list_636 k_637) (letrec*-values () (if (zero? k_637) list_636 (loop_635 (cdr list_636) (- k_637 1))))))))) ((case-lambda (() (letrec*-values () loop_635)))))))) list_633 k_634))))) ((take-right_644) (case-lambda ((list_639 k_640) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_641) (values (case-lambda ((list_642 ref_643) (letrec*-values () (if (pair? ref_643) (loop_641 (cdr list_642) (cdr ref_643)) list_642))))))) ((case-lambda (() (letrec*-values () loop_641)))))))) list_639 (drop_638 list_639 k_640)))))) ((drop-right_650) (case-lambda ((list_645 k_646) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_647) (values (case-lambda ((list_648 ref_649) (letrec*-values () (if (pair? ref_649) (cons (car list_648) (loop_647 (cdr list_648) (cdr ref_649))) (quote ())))))))) ((case-lambda (() (letrec*-values () loop_647)))))))) list_645 (drop_638 list_645 k_646)))))) ((split-at_659) (case-lambda ((x_651 k_652) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_653) (values (case-lambda ((x_654 k_658) (letrec*-values () (if (zero? k_658) (values (quote ()) x_654) ((case-lambda (() (letrec*-values ((tmp_657 (loop_653 (cdr x_654) (- k_658 1)))) ((case-lambda (() (letrec*-values (((head_655 tail_656) (apply values tmp_657))) ((case-lambda (() (letrec*-values () (values (cons (car x_654) head_655) tail_656)))))))))))))))))))) ((case-lambda (() (letrec*-values () loop_653)))))))) x_651 k_652))))) ((circular-list?_668) (case-lambda ((obj_660) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_661) (values (case-lambda ((fast_662 slow_664) (letrec*-values () (if (pair? fast_662) ((case-lambda ((fast_663) (letrec*-values () (if (pair? fast_663) ((case-lambda ((fast_665 slow_666) (letrec*-values () ((case-lambda ((x_667) (letrec*-values () (if x_667 x_667 (loop_661 fast_665 slow_666))))) (eq? fast_665 slow_666))))) (cdr fast_663) (cdr slow_664)) #f)))) (cdr fast_662)) #f))))))) ((case-lambda (() (letrec*-values () loop_661)))))))) obj_660 obj_660))))) ((any_674) (case-lambda ((pred_672 clist_669) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_670) (values (case-lambda ((clist_671) (letrec*-values () (if (null? clist_671) #f ((case-lambda ((x_673) (letrec*-values () (if x_673 x_673 (loop_670 (cdr clist_671)))))) (pred_672 (car clist_671)))))))))) ((case-lambda (() (letrec*-values () loop_670)))))))) clist_669))))) ((every_679) (case-lambda ((pred_678 clist_675) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_676) (values (case-lambda ((clist_677) (letrec*-values () (if (null? clist_677) #t (if (pred_678 (car clist_677)) (loop_676 (cdr clist_677)) #f)))))))) ((case-lambda (() (letrec*-values () loop_676)))))))) clist_675))))) ((map-in-order_687) (case-lambda ((proc_682 . list*_680) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_681) (values (case-lambda ((list*_685) (letrec*-values () (call-with-current-continuation (case-lambda ((return_684) (letrec*-values () ((case-lambda ((value_686) (letrec*-values () (cons value_686 (loop_681 (map cdr list*_685)))))) (apply proc_682 (map (case-lambda ((list_683) (letrec*-values () (if (null? list_683) (return_684 (quote ())) (car list_683))))) list*_685))))))))))))) ((case-lambda (() (letrec*-values () loop_681)))))))) list*_680))))) ((unfold_693) (case-lambda ((pred?_688 proc_689 step_690 seed_691) (letrec*-values () (unfold_693 pred?_688 proc_689 step_690 seed_691 (case-lambda ((x_692) (letrec*-values () (quote ()))))))) ((pred?_696 proc_695 step_697 seed_694 tail-gen_698) (letrec*-values () (if (pred?_696 seed_694) (tail-gen_698 seed_694) (cons (proc_695 seed_694) (unfold_693 pred?_696 proc_695 step_697 (step_697 seed_694) tail-gen_698))))))) ((map-type_699) (make-rtd (quote map-type) (quote comparator) (quote entries))) ((%make-map_700) (rtd-constructor map-type_699 (quote comparator) (quote entries))) ((map?_701) (rtd-predicate map-type_699)) ((map-entries_702) (rtd-accessor map-type_699 (quote entries))) ((map-comparator_703) (rtd-accessor map-type_699 (quote comparator))) ((map-set-entries!_704) (rtd-mutator map-type_699 (quote entries))) ((map-equality-predicate_706) (case-lambda ((map_705) (letrec*-values () (comparator-equality-predicate_210 (map-comparator_703 map_705)))))) ((make-map_708) (case-lambda ((comparator_707) (letrec*-values () (%make-map_700 comparator_707 (quote ())))))) ((map-ref_711) (case-lambda ((map_709 key_710) (letrec*-values () (map-ref_711 map_709 key_710 (case-lambda (() (letrec*-values () (error "key not found" key_710))))))) ((map_713 key_712 failure_714) (letrec*-values () ((case-lambda ((temp_715) (letrec*-values () (if temp_715 (cdr temp_715) (failure_714))))) (assoc key_712 (map-entries_702 map_713) (map-equality-predicate_706 map_713))))))) ((map-ref/default_719) (case-lambda ((map_716 key_717 default_718) (letrec*-values () (map-ref_711 map_716 key_717 (case-lambda (() (letrec*-values () default_718)))))))) ((map-set_723) (case-lambda ((map_720 key_721 value_722) (letrec*-values () (%make-map_700 (map-comparator_703 map_720) (cons (cons key_721 value_722) (map-entries_702 map_720))))))) ((map-delete_729) (case-lambda ((map_724 key_727) (letrec*-values (((equality_728) (map-equality-predicate_706 map_724))) (%make-map_700 (map-comparator_703 map_724) (((case-lambda (() (letrec*-values (((loop_725) (values (case-lambda ((entries_726) (letrec*-values () (if (null? entries_726) (quote ()) (if (equality_728 (caar entries_726) key_727) (cdr entries_726) (cons (car entries_726) (loop_725 (cdr entries_726))))))))))) ((case-lambda (() (letrec*-values () loop_725)))))))) (map-entries_702 map_724))))))) ((map-fold_735) (case-lambda ((map_730 proc_733 seed_734) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_731) (values (case-lambda ((entries_732) (letrec*-values () (if (null? entries_732) seed_734 (proc_733 (caar entries_732) (cdar entries_732) (loop_731 (cdr entries_732)))))))))) ((case-lambda (() (letrec*-values () loop_731)))))))) (map-entries_702 map_730)))))) ((map-for-each_739) (case-lambda ((proc_737 map_738) (letrec*-values () (for-each (case-lambda ((entry_736) (letrec*-values () (proc_737 (car entry_736) (cdr entry_736))))) (map-entries_702 map_738)))))) ((<set>_740) (make-rtd (quote <set>) (quote comparator) (quote elements))) ((%make-set_741) (rtd-constructor <set>_740 (quote comparator) (quote elements))) ((set?_742) (rtd-predicate <set>_740)) ((set-elements_743) (rtd-accessor <set>_740 (quote elements))) ((set-comparator_744) (rtd-accessor <set>_740 (quote comparator))) ((set-set-elements!_745) (rtd-mutator <set>_740 (quote elements))) ((make-set_747) (case-lambda ((comparator_746) (letrec*-values () (%make-set_741 comparator_746 (quote ())))))) ((set-equality-predicate_749) (case-lambda ((set_748) (letrec*-values () (comparator-equality-predicate_210 (set-comparator_744 set_748)))))) ((set-contains?_756) (case-lambda ((set_750 element_753) (letrec*-values (((equality_754) (set-equality-predicate_749 set_750))) (((case-lambda (() (letrec*-values (((loop_751) (values (case-lambda ((elements_752) (letrec*-values () (if (not (null? elements_752)) ((case-lambda ((x_755) (letrec*-values () (if x_755 x_755 (loop_751 (cdr elements_752)))))) (equality_754 (car elements_752) element_753)) #f))))))) ((case-lambda (() (letrec*-values () loop_751)))))))) (set-elements_743 set_750)))))) ((set-adjoin_759) (case-lambda ((set_757 element_758) (letrec*-values () (%make-set_741 (set-comparator_744 set_757) (cons element_758 (set-elements_743 set_757))))))) ((<syntactic-environment>_760) (make-rtd (quote <syntactic-environment>) (quote bindings) (quote references))) ((%make-syntactic-environment_761) (rtd-constructor <syntactic-environment>_760 (quote bindings) (quote references))) ((syntactic-environment?_762) (rtd-predicate <syntactic-environment>_760)) ((syntactic-environment-references_763) (rtd-accessor <syntactic-environment>_760 (quote references))) ((syntactic-environment-bindings_764) (rtd-accessor <syntactic-environment>_760 (quote bindings))) ((syntactic-environment-set-bindings!_765) (rtd-mutator <syntactic-environment>_760 (quote bindings))) ((current-syntactic-environment_766) (make-parameter_2 #f)) ((current-scope_767) current-syntactic-environment_766) ((get-syntactic-environment_768) (case-lambda (() (letrec*-values () (current-syntactic-environment_766))))) ((make-syntactic-environment_769) (case-lambda (() (letrec*-values () (%make-syntactic-environment_761 (make-map_708 (make-eq-comparator_221)) (box_146 (quote ()))))))) ((get-bindings_770) (case-lambda (() (letrec*-values () (syntactic-environment-bindings_764 (current-syntactic-environment_766)))))) ((set-bindings!_772) (case-lambda ((bindings_771) (letrec*-values () (syntactic-environment-set-bindings!_765 (current-syntactic-environment_766) bindings_771))))) ((current-references_773) (case-lambda (() (letrec*-values () (syntactic-environment-references_763 (current-syntactic-environment_766)))))) ((get-references_774) (case-lambda (() (letrec*-values () (unbox_148 (current-references_773)))))) ((set-references!_776) (case-lambda ((references_775) (letrec*-values () (set-box!_149 (current-references_773) references_775))))) ((with-syntactic-environment_782) (case-lambda ((syntactic-environment_778 thunk_780) (letrec*-values () ((case-lambda ((p_777) (letrec*-values () ((case-lambda ((old_781 new_779) (letrec*-values () (dynamic-wind (case-lambda (() (letrec*-values () (p_777 <param-set!>_7 new_779)))) (case-lambda (() (letrec*-values () (thunk_780)))) (case-lambda (() (letrec*-values () (p_777 <param-set!>_7 old_781)))))))) (p_777) ((p_777 <param-convert>_5) syntactic-environment_778))))) current-syntactic-environment_766))))) ((with-scope_787) (case-lambda ((thunk_785) (letrec*-values () ((case-lambda ((p_783) (letrec*-values () ((case-lambda ((old_786 new_784) (letrec*-values () (dynamic-wind (case-lambda (() (letrec*-values () (p_783 <param-set!>_7 new_784)))) (case-lambda (() (letrec*-values () (thunk_785)))) (case-lambda (() (letrec*-values () (p_783 <param-set!>_7 old_786)))))))) (p_783) ((p_783 <param-convert>_5) (%make-syntactic-environment_761 (get-bindings_770) (current-references_773))))))) current-syntactic-environment_766))))) ((with-isolated-references_795) (case-lambda ((thunk_792) (letrec*-values (((old-references_788) #f) ((new-references_789) (quote ()))) (dynamic-wind (case-lambda (() (letrec*-values () (set! old-references_788 (get-references_774)) (set-references!_776 new-references_789) (for-each (case-lambda ((binding_790) (letrec*-values () (binding-increment-reference-count!_791 binding_790)))) (get-references_774))))) thunk_792 (case-lambda (() (letrec*-values () (for-each (case-lambda ((binding_793) (letrec*-values () (binding-decrement-reference-count!_794 binding_793)))) (get-references_774)) (set! new-references_789 (get-references_774)) (set-references!_776 old-references_788))))))))) ((<denotation>_796) (make-rtd (quote <denotation>) (quote type) (quote value) (quote syntax))) ((make-denotation_797) (rtd-constructor <denotation>_796 (quote type) (quote value) (quote syntax))) ((denotation?_798) (rtd-predicate <denotation>_796)) ((denotation-syntax_799) (rtd-accessor <denotation>_796 (quote syntax))) ((denotation-value_800) (rtd-accessor <denotation>_796 (quote value))) ((denotation-type_801) (rtd-accessor <denotation>_796 (quote type))) ((make-primitive_804) (case-lambda ((symbol_802 syntax_803) (letrec*-values () (make-denotation_797 (quote primitive) symbol_802 syntax_803))))) ((primitive?_806) (case-lambda ((denotation_805) (letrec*-values () (if (denotation?_798 denotation_805) (eq? (denotation-type_801 denotation_805) (quote primitive)) #f))))) ((primitive-symbol_808) (case-lambda ((primitive_807) (letrec*-values () (denotation-value_800 primitive_807))))) ((<syntactic-binding>_809) (make-rtd (quote <syntactic-binding>) (quote syntax) (quote denotation) (quote scope) (quote reference-count))) ((%make-binding_810) (rtd-constructor <syntactic-binding>_809 (quote syntax) (quote denotation) (quote scope) (quote reference-count))) ((syntactic-binding?_811) (rtd-predicate <syntactic-binding>_809)) ((binding-reference-count_812) (rtd-accessor <syntactic-binding>_809 (quote reference-count))) ((binding-scope_813) (rtd-accessor <syntactic-binding>_809 (quote scope))) ((binding-denotation_814) (rtd-accessor <syntactic-binding>_809 (quote denotation))) ((syntactic-binding-syntax_815) (rtd-accessor <syntactic-binding>_809 (quote syntax))) ((binding-set-reference-count!_816) (rtd-mutator <syntactic-binding>_809 (quote reference-count))) ((make-binding_819) (case-lambda ((syntax_817 denotation_818) (letrec*-values () (%make-binding_810 syntax_817 denotation_818 (current-scope_767) 0))))) ((binding-increment-reference-count!_791) (case-lambda ((binding_820) (letrec*-values () (binding-set-reference-count!_816 binding_820 (+ (binding-reference-count_812 binding_820) 1)))))) ((binding-decrement-reference-count!_794) (case-lambda ((binding_821) (letrec*-values () (binding-set-reference-count!_816 binding_821 (- (binding-reference-count_812 binding_821) 1)))))) ((binding-identifier_823) (case-lambda ((binding_822) (letrec*-values () (syntax-datum_156 (syntactic-binding-syntax_815 binding_822)))))) ((binding-reference!_825) (case-lambda ((binding_824) (letrec*-values () (set-references!_776 (cons binding_824 (get-references_774))) (binding-increment-reference-count!_791 binding_824))))) ((binding-referenced?_827) (case-lambda ((binding_826) (letrec*-values () (if (eq? (binding-scope_813 binding_826) (current-scope_767)) (> (binding-reference-count_812 binding_826) 0) #f))))) ((%lookup-binding_829) (case-lambda ((identifier_828) (letrec*-values () (map-ref/default_719 (get-bindings_770) identifier_828 #f))))) ((identifier-referenced?_832) (case-lambda ((identifier_830) (letrec*-values () ((case-lambda ((binding_831) (letrec*-values () (if binding_831 (binding-referenced?_827 binding_831) #f)))) (%lookup-binding_829 identifier_830)))))) ((lookup-binding!_837) (case-lambda ((identifier_833) (letrec*-values () ((case-lambda ((temp_834) (letrec*-values () (if temp_834 ((case-lambda ((binding_835) (letrec*-values () (binding-reference!_825 binding_835) ((case-lambda ((new-binding_836) (letrec*-values () (binding-reference!_825 new-binding_836) new-binding_836))) (make-binding_819 (syntactic-binding-syntax_815 binding_835) (binding-denotation_814 binding_835)))))) temp_834) #f)))) (%lookup-binding_829 identifier_833)))))) ((insert-binding!_842) (case-lambda ((identifier-syntax_838 denotation_840) (letrec*-values (((identifier_839) (syntax-datum_156 identifier-syntax_838))) (if (identifier-referenced?_832 identifier_839) (begin (compile-error_591 "identifier has already been referenced" identifier-syntax_838) (if #f #f (if #f #f))) (if #f #f)) ((case-lambda ((binding_841) (letrec*-values () (set-bindings!_772 (map-set_723 (get-bindings_770) identifier_839 binding_841)) (binding-reference!_825 binding_841)))) (make-binding_819 identifier-syntax_838 denotation_840)))))) ((lookup-syntax!_845) (case-lambda ((identifier_843) (letrec*-values () ((case-lambda ((temp_844) (letrec*-values () (if temp_844 (syntactic-binding-syntax_815 temp_844) #f)))) (lookup-binding!_837 identifier_843)))))) ((lookup-denotation!_848) (case-lambda ((identifier_846) (letrec*-values () ((case-lambda ((temp_847) (letrec*-values () (if temp_847 (binding-denotation_814 temp_847) #f)))) (lookup-binding!_837 identifier_846)))))) ((%insert-binding!_854) (case-lambda ((identifier-syntax_850 denotation_851) (letrec*-values (((identifier_849) (syntax-datum_156 identifier-syntax_850))) ((case-lambda ((temp_852) (letrec*-values () (if temp_852 ((case-lambda ((binding_853) (letrec*-values () (if (not (eq? (binding-denotation_814 binding_853) denotation_851)) (begin (compile-note_597 "initial binding was here" (syntactic-binding-syntax_815 binding_853)) (compile-error_591 "identifier rebound with different denotation" identifier-syntax_850) (if #f #f (if #f #f))) (if #f #f))))) temp_852) (insert-binding!_842 identifier-syntax_850 denotation_851))))) (%lookup-binding_829 identifier_849)))))) ((insert-binding-from!_857) (case-lambda ((identifier-syntax_855 syntactic-environment_856) (letrec*-values () (insert-binding-from!_857 identifier-syntax_855 syntactic-environment_856 identifier-syntax_855))) ((identifier-syntax_860 syntactic-environment_858 new-identifier-syntax_862) (letrec*-values (((identifier_859) (syntax-datum_156 identifier-syntax_860))) ((case-lambda ((temp_861) (letrec*-values () (if temp_861 ((case-lambda ((binding_863) (letrec*-values () (%insert-binding!_854 new-identifier-syntax_862 (binding-denotation_814 binding_863))))) temp_861) (compile-error_591 (format_99 "unbound identifier ‘~a’" identifier_859) identifier-syntax_860))))) (with-syntactic-environment_782 syntactic-environment_858 (case-lambda (() (letrec*-values () (%lookup-binding_829 identifier_859)))))))))) ((delete-binding!_866) (case-lambda ((identifier-syntax_865) (letrec*-values (((identifier_864) (syntax-datum_156 identifier-syntax_865))) (if (not (%lookup-binding_829 identifier_864)) (begin (compile-error_591 (format_99 "unbound identifier ‘~a’" identifier_864) identifier-syntax_865) (if #f #f (if #f #f))) (if #f #f)) (set-bindings!_772 (map-delete_729 (get-bindings_770) identifier_864)))))) ((derive-syntactic-environment_870) (case-lambda ((syntactic-environment_867 syntax_868) (letrec*-values () (derive-syntactic-environment_870 syntactic-environment_867 syntax_868 (case-lambda ((identifier_869) (letrec*-values () identifier_869)))))) ((syntactic-environment_875 syntax_873 rename_872) (letrec*-values () (with-syntactic-environment_782 (make-syntactic-environment_769) (case-lambda (() (letrec*-values () (map-for-each_739 (case-lambda ((identifier_874 binding_871) (letrec*-values () (%insert-binding!_854 (derive-syntax_185 (rename_872 (binding-identifier_823 binding_871)) syntax_873) (binding-denotation_814 binding_871))))) (with-syntactic-environment_782 syntactic-environment_875 (case-lambda (() (letrec*-values () (get-bindings_770)))))) (get-syntactic-environment_768))))))))) ((insert-bindings-from!_879) (case-lambda ((syntactic-environment_878) (letrec*-values () (map-for-each_739 (case-lambda ((identifier_877 binding_876) (letrec*-values () (%insert-binding!_854 (derive-syntax_185 (binding-identifier_823 binding_876) (syntactic-binding-syntax_815 binding_876)) (binding-denotation_814 binding_876))))) (with-syntactic-environment_782 syntactic-environment_878 (case-lambda (() (letrec*-values () (get-bindings_770)))))))))) ((<syntactic-closure>_880) (make-rtd (quote <syntactic-closure>) (quote environment) (quote free-names) (quote form))) ((make-syntactic-closure_881) (rtd-constructor <syntactic-closure>_880 (quote environment) (quote free-names) (quote form))) ((syntactic-closure?_882) (rtd-predicate <syntactic-closure>_880)) ((syntactic-closure-form_883) (rtd-accessor <syntactic-closure>_880 (quote form))) ((syntactic-closure-free-names_884) (rtd-accessor <syntactic-closure>_880 (quote free-names))) ((syntactic-closure-environment_885) (rtd-accessor <syntactic-closure>_880 (quote environment))) ((close-syntax_888) (case-lambda ((form_887 environment_886) (letrec*-values () (make-syntactic-closure_881 environment_886 (quote ()) form_887))))) ((capture-syntactic-environment_890) (case-lambda ((proc_889) (letrec*-values () (proc_889 (get-syntactic-environment_768)))))) ((identifier?_892) (case-lambda ((form_891) (letrec*-values () ((case-lambda ((x_893) (letrec*-values () (if x_893 x_893 (if (syntactic-closure?_882 form_891) (identifier?_892 (syntactic-closure-form_883 form_891)) #f))))) (symbol? form_891)))))) ((identifier->symbol_896) (case-lambda ((form_894) (letrec*-values () (unclose-form_895 form_894))))) ((unclose-form_895) (case-lambda ((form_897) (letrec*-values () (if (syntactic-closure?_882 form_897) (unclose-form_895 (syntactic-closure-form_883 form_897)) form_897))))) ((make-synthetic-identifier_899) (case-lambda ((identifier_898) (letrec*-values () (close-syntax_888 identifier_898 #f))))) ((identifier=?_907) (case-lambda ((environment1_904 identifier1_900 environment2_906 identifier2_901) (letrec*-values (((denotation1_903) (sc-lookup-denotation!_905 identifier1_900 environment1_904)) ((denotation2_902) (sc-lookup-denotation!_905 identifier2_901 environment2_906))) (if (if denotation1_903 denotation2_902 #f) (eq? denotation1_903 denotation2_902) (if (if (not denotation1_903) (not denotation2_902) #f) (symbol=? (identifier->symbol_896 identifier1_900) (identifier->symbol_896 identifier2_901)) #f)))))) ((current-free-names-map_908) (make-parameter_2 (make-map_708 (make-eq-comparator_221)) box_146)) ((get-free-names-map_909) (case-lambda (() (letrec*-values () (unbox_148 (current-free-names-map_908)))))) ((set-free-names-map!_911) (case-lambda ((map_910) (letrec*-values () (set-box!_149 (current-free-names-map_908) map_910))))) ((lookup-syntactic-environment_914) (case-lambda ((name_912) (letrec*-values () ((case-lambda ((x_913) (letrec*-values () (if x_913 x_913 (get-syntactic-environment_768))))) (map-ref/default_719 (get-free-names-map_909) name_912 #f)))))) ((set-syntactic-environment!_917) (case-lambda ((name_915 syntactic-environment_916) (letrec*-values () (set-free-names-map!_911 (map-set_723 (get-free-names-map_909) name_915 syntactic-environment_916)))))) ((call-in-syntactic-closure_926) (case-lambda ((syntactic-closure_918 proc_924) (letrec*-values () ((case-lambda ((syntactic-environment_923) (letrec*-values () (with-syntactic-environment_782 ((case-lambda ((x_919) (letrec*-values () (if x_919 x_919 (make-syntactic-closure_881))))) (syntactic-closure-environment_885 syntactic-closure_918)) (case-lambda (() (letrec*-values () ((case-lambda ((p_920) (letrec*-values () ((case-lambda ((old_925 new_921) (letrec*-values () (dynamic-wind (case-lambda (() (letrec*-values () (p_920 <param-set!>_7 new_921)))) (case-lambda (() (letrec*-values () (for-each (case-lambda ((name_922) (letrec*-values () (set-syntactic-environment!_917 name_922 syntactic-environment_923)))) (syntactic-closure-free-names_884 syntactic-closure_918)) (proc_924 (syntactic-closure-form_883 syntactic-closure_918))))) (case-lambda (() (letrec*-values () (p_920 <param-set!>_7 old_925)))))))) (p_920) ((p_920 <param-convert>_5) (get-free-names-map_909)))))) current-free-names-map_908)))))))) (get-syntactic-environment_768)))))) ((sc-lookup-binding!_933) (case-lambda ((identifier_927) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_928) (values (case-lambda ((identifier_929) (letrec*-values () ((case-lambda ((x_930) (letrec*-values () (if x_930 x_930 (if (syntactic-closure?_882 identifier_929) (call-in-syntactic-closure_926 identifier_929 loop_928) #f))))) (with-syntactic-environment_782 (lookup-syntactic-environment_914 identifier_929) (case-lambda (() (letrec*-values () (lookup-binding!_837 identifier_929)))))))))))) ((case-lambda (() (letrec*-values () loop_928)))))))) identifier_927))) ((identifier_932 environment_931) (letrec*-values () (with-syntactic-environment_782 environment_931 (case-lambda (() (letrec*-values () (sc-lookup-binding!_933 identifier_932))))))))) ((sc-lookup-denotation!_905) (case-lambda (arg*_934 (letrec*-values () ((case-lambda ((temp_935) (letrec*-values () (if temp_935 (binding-denotation_814 temp_935) #f)))) (apply sc-lookup-binding!_933 arg*_934)))))) ((sc-lookup-syntax!_938) (case-lambda (arg*_936 (letrec*-values () ((case-lambda ((temp_937) (letrec*-values () (if temp_937 (syntactic-binding-syntax_815 temp_937) #f)))) (apply sc-lookup-binding!_933 arg*_936)))))) ((<expression>_939) (make-rtd (quote <expression>) (quote type) (quote value) (quote syntax))) ((make-expression_940) (rtd-constructor <expression>_939 (quote type) (quote value) (quote syntax))) ((expression?_941) (rtd-predicate <expression>_939)) ((expression-syntax_942) (rtd-accessor <expression>_939 (quote syntax))) ((expression-value_943) (rtd-accessor <expression>_939 (quote value))) ((expression-type_944) (rtd-accessor <expression>_939 (quote type))) ((make-reference_947) (case-lambda ((location_945 syntax_946) (letrec*-values () (make-expression_940 (quote reference) location_945 syntax_946))))) ((reference?_949) (case-lambda ((expression_948) (letrec*-values () (eq? (expression-type_944 expression_948) (quote reference)))))) ((reference-location_951) (case-lambda ((reference_950) (letrec*-values () (expression-value_943 reference_950))))) ((make-primitive-reference_954) (case-lambda ((symbol_952 syntax_953) (letrec*-values () (make-expression_940 (quote primitive) symbol_952 syntax_953))))) ((primitive-reference?_956) (case-lambda ((expression_955) (letrec*-values () (eq? (expression-type_944 expression_955) (quote primitive)))))) ((primitive-reference-symbol_958) (case-lambda ((primitive-reference_957) (letrec*-values () (expression-value_943 primitive-reference_957))))) ((make-literal_961) (case-lambda ((datum_959 syntax_960) (letrec*-values () (make-expression_940 (quote literal) datum_959 syntax_960))))) ((literal?_963) (case-lambda ((expression_962) (letrec*-values () (eq? (expression-type_944 expression_962) (quote literal)))))) ((literal-value_965) (case-lambda ((expression_964) (letrec*-values () (expression-value_943 expression_964))))) ((self-evaluating?_972) (case-lambda ((value_966) (letrec*-values () ((case-lambda ((x_971) (letrec*-values () (if x_971 x_971 ((case-lambda ((x_970) (letrec*-values () (if x_970 x_970 ((case-lambda ((x_969) (letrec*-values () (if x_969 x_969 ((case-lambda ((x_968) (letrec*-values () (if x_968 x_968 ((case-lambda ((x_967) (letrec*-values () (if x_967 x_967 (boolean? value_966))))) (bytevector? value_966)))))) (vector? value_966)))))) (char? value_966)))))) (string? value_966)))))) (number? value_966)))))) ((make-undefined_974) (case-lambda ((syntax_973) (letrec*-values () (make-expression_940 (quote undefined) #f syntax_973))))) ((undefined?_976) (case-lambda ((expression_975) (letrec*-values () (eq? (expression-type_944 expression_975) (quote undefined)))))) ((make-procedure-call_980) (case-lambda ((operator_977 operand*_978 syntax_979) (letrec*-values () (make-expression_940 (quote procedure-call) (vector operator_977 operand*_978) syntax_979))))) ((procedure-call?_982) (case-lambda ((expression_981) (letrec*-values () (eq? (expression-type_944 expression_981) (quote procedure-call)))))) ((procedure-call-operator_984) (case-lambda ((expression_983) (letrec*-values () (vector-ref (expression-value_943 expression_983) 0))))) ((procedure-call-operands_986) (case-lambda ((expression_985) (letrec*-values () (vector-ref (expression-value_943 expression_985) 1))))) ((make-primitive-operation_990) (case-lambda ((operator_987 operand*_988 syntax_989) (letrec*-values () (make-expression_940 (quote primitive-operation) (vector operator_987 operand*_988) syntax_989))))) ((primitive-operation?_992) (case-lambda ((expression_991) (letrec*-values () (eq? (expression-type_944 expression_991) (quote primitive-operation)))))) ((primitive-operation-operator_994) (case-lambda ((expression_993) (letrec*-values () (vector-ref (expression-value_943 expression_993) 0))))) ((primitive-operation-operands_996) (case-lambda ((expression_995) (letrec*-values () (vector-ref (expression-value_943 expression_995) 1))))) ((make-procedure_999) (case-lambda ((clauses_997 syntax_998) (letrec*-values () (make-expression_940 (quote procedure) clauses_997 syntax_998))))) ((expression-procedure?_1001) (case-lambda ((expression_1000) (letrec*-values () (eq? (expression-type_944 expression_1000) (quote procedure)))))) ((procedure-clauses_1003) (case-lambda ((procedure_1002) (letrec*-values () (expression-value_943 procedure_1002))))) ((<clause>_1004) (make-rtd (quote <clause>) (quote formals) (quote body) (quote syntax))) ((make-clause_1005) (rtd-constructor <clause>_1004 (quote formals) (quote body) (quote syntax))) ((clause?_1006) (rtd-predicate <clause>_1004)) ((clause-syntax_1007) (rtd-accessor <clause>_1004 (quote syntax))) ((clause-body_1008) (rtd-accessor <clause>_1004 (quote body))) ((clause-formals_1009) (rtd-accessor <clause>_1004 (quote formals))) ((make-assignment_1013) (case-lambda ((location_1010 expression_1011 syntax_1012) (letrec*-values () (make-expression_940 (quote assignment) (vector location_1010 expression_1011) syntax_1012))))) ((assignment?_1015) (case-lambda ((expression_1014) (letrec*-values () (eq? (expression-type_944 expression_1014) (quote assignment)))))) ((assignment-location_1017) (case-lambda ((assignment_1016) (letrec*-values () (vector-ref (expression-value_943 assignment_1016) 0))))) ((assignment-expression_1019) (case-lambda ((assignment_1018) (letrec*-values () (vector-ref (expression-value_943 assignment_1018) 1))))) ((%make-multiple-assignment_1023) (case-lambda ((formals_1020 expression_1021 syntax_1022) (letrec*-values () (make-expression_940 (quote multiple-assignment) (vector formals_1020 expression_1021) syntax_1022))))) ((multiple-assignment?_1025) (case-lambda ((expression_1024) (letrec*-values () (eq? (expression-type_944 expression_1024) (quote multiple-assignment)))))) ((multiple-assignment-formals_1027) (case-lambda ((assignment_1026) (letrec*-values () (vector-ref (expression-value_943 assignment_1026) 0))))) ((multiple-assignment-expression_1029) (case-lambda ((assignment_1028) (letrec*-values () (vector-ref (expression-value_943 assignment_1028) 1))))) ((make-multiple-assignment_1035) (case-lambda ((formals_1030 expression_1031 syntax_1032) (letrec*-values (((location_1033) (formals-location_1034 formals_1030))) (if location_1033 (make-assignment_1013 location_1033 expression_1031 syntax_1032) (%make-multiple-assignment_1023 formals_1030 expression_1031 syntax_1032)))))) ((make-letrec*-expression_1039) (case-lambda ((bindings_1036 body_1037 syntax_1038) (letrec*-values () (make-expression_940 (quote letrec*-expression) (vector bindings_1036 body_1037) syntax_1038))))) ((letrec*-expression?_1041) (case-lambda ((expression_1040) (letrec*-values () (eq? (expression-type_944 expression_1040) (quote letrec*-expression)))))) ((letrec*-expression-bindings_1043) (case-lambda ((expression_1042) (letrec*-values () (vector-ref (expression-value_943 expression_1042) 0))))) ((letrec*-expression-body_1045) (case-lambda ((expression_1044) (letrec*-values () (vector-ref (expression-value_943 expression_1044) 1))))) ((%make-letrec-expression_1049) (case-lambda ((bindings_1046 body_1047 syntax_1048) (letrec*-values () (make-expression_940 (quote letrec-expression) (vector bindings_1046 body_1047) syntax_1048))))) ((letrec-expression?_1051) (case-lambda ((expression_1050) (letrec*-values () (eq? (expression-type_944 expression_1050) (quote letrec-expression)))))) ((letrec-expression-bindings_1053) (case-lambda ((expression_1052) (letrec*-values () (vector-ref (expression-value_943 expression_1052) 0))))) ((letrec-expression-body_1055) (case-lambda ((expression_1054) (letrec*-values () (vector-ref (expression-value_943 expression_1054) 1))))) ((make-letrec-expression_1061) (case-lambda ((bindings_1056 body_1057 syntax_1059) (letrec*-values () (if (null? bindings_1056) (make-sequence_1060 body_1057 syntax_1059) (%make-letrec-expression_1049 bindings_1056 (flatten_1058 body_1057) syntax_1059)))))) ((%make-let-values-expression_1065) (case-lambda ((binding_1062 body_1063 syntax_1064) (letrec*-values () (make-expression_940 (quote let-values-expression) (vector binding_1062 body_1063) syntax_1064))))) ((let-values-expression?_1067) (case-lambda ((expression_1066) (letrec*-values () (eq? (expression-type_944 expression_1066) (quote let-values-expression)))))) ((let-values-expression-binding_1069) (case-lambda ((expression_1068) (letrec*-values () (vector-ref (expression-value_943 expression_1068) 0))))) ((let-values-expression-body_1071) (case-lambda ((expression_1070) (letrec*-values () (vector-ref (expression-value_943 expression_1070) 1))))) ((make-let-values-expression_1075) (case-lambda ((binding_1072 body_1073 syntax_1074) (letrec*-values () (%make-let-values-expression_1065 binding_1072 (flatten_1058 body_1073) syntax_1074))))) ((%make-sequence_1078) (case-lambda ((expressions_1076 syntax_1077) (letrec*-values () (make-expression_940 (quote sequence) expressions_1076 syntax_1077))))) ((sequence?_1080) (case-lambda ((expression_1079) (letrec*-values () (eq? (expression-type_944 expression_1079) (quote sequence)))))) ((sequence-expressions_1082) (case-lambda ((expression_1081) (letrec*-values () (expression-value_943 expression_1081))))) ((make-sequence_1060) (case-lambda ((expressions_1085 syntax_1084) (letrec*-values (((expression*_1083) (flatten_1058 expressions_1085))) (if (= (length expression*_1083) 1) (car expression*_1083) (%make-sequence_1078 expression*_1083 syntax_1084)))))) ((make-conditional_1090) (case-lambda ((test_1086 consequent_1087 alternate_1088 syntax_1089) (letrec*-values () (make-expression_940 (quote conditional) (vector test_1086 consequent_1087 alternate_1088) syntax_1089))))) ((conditional?_1092) (case-lambda ((expression_1091) (letrec*-values () (eq? (expression-type_944 expression_1091) (quote conditional)))))) ((conditional-test_1094) (case-lambda ((expression_1093) (letrec*-values () (vector-ref (expression-value_943 expression_1093) 0))))) ((conditional-consequent_1096) (case-lambda ((expression_1095) (letrec*-values () (vector-ref (expression-value_943 expression_1095) 1))))) ((conditional-alternate_1098) (case-lambda ((expression_1097) (letrec*-values () (vector-ref (expression-value_943 expression_1097) 2))))) ((<location>_1099) (make-rtd (quote <location>) (quote syntax))) ((make-location_1100) (rtd-constructor <location>_1099 (quote syntax))) ((location?_1101) (rtd-predicate <location>_1099)) ((location-syntax_1102) (rtd-accessor <location>_1099 (quote syntax))) ((<binding>_1103) (make-rtd (quote <binding>) (quote formals) (quote expression) (quote syntax))) ((make-binding_1104) (rtd-constructor <binding>_1103 (quote formals) (quote expression) (quote syntax))) ((binding?_1105) (rtd-predicate <binding>_1103)) ((binding-syntax_1106) (rtd-accessor <binding>_1103 (quote syntax))) ((binding-expression_1107) (rtd-accessor <binding>_1103 (quote expression))) ((binding-formals_1108) (rtd-accessor <binding>_1103 (quote formals))) ((<formals>_1109) (make-rtd (quote <formals>) (quote fixed-arguments) (quote rest-argument) (quote syntax))) ((%make-formals_1110) (rtd-constructor <formals>_1109 (quote fixed-arguments) (quote rest-argument) (quote syntax))) ((formals?_1111) (rtd-predicate <formals>_1109)) ((formals-syntax_1112) (rtd-accessor <formals>_1109 (quote syntax))) ((formals-rest-argument_1113) (rtd-accessor <formals>_1109 (quote rest-argument))) ((formals-fixed-arguments_1114) (rtd-accessor <formals>_1109 (quote fixed-arguments))) ((make-formals_1117) (case-lambda ((fixed-arguments_1115 syntax_1116) (letrec*-values () (make-formals_1117 fixed-arguments_1115 #f syntax_1116))) ((fixed-arguments_1118 rest-argument_1119 syntax_1120) (letrec*-values () (%make-formals_1110 fixed-arguments_1118 rest-argument_1119 syntax_1120))))) ((formals-locations_1122) (case-lambda ((formals_1121) (letrec*-values () (if (formals-rest-argument_1113 formals_1121) (cons (formals-rest-argument_1113 formals_1121) (formals-fixed-arguments_1114 formals_1121)) (formals-fixed-arguments_1114 formals_1121)))))) ((formals-location_1034) (case-lambda ((formals_1123) (letrec*-values () (if (if (= (length (formals-fixed-arguments_1114 formals_1123)) 1) (not (formals-rest-argument_1113 formals_1123)) #f) (car (formals-fixed-arguments_1114 formals_1123)) #f))))) ((<operator>_1124) (make-rtd (quote <operator>) (quote identifier))) ((make-operator_1125) (rtd-constructor <operator>_1124 (quote identifier))) ((operator?_1126) (rtd-predicate <operator>_1124)) ((operator-identifier_1127) (rtd-accessor <operator>_1124 (quote identifier))) ((flatten_1058) (case-lambda ((expression*_1129) (letrec*-values () (apply append (map (case-lambda ((expression_1128) (letrec*-values () (if (sequence?_1080 expression_1128) (sequence-expressions_1082 expression_1128) (list expression_1128))))) expression*_1129)))))) ((expression->datum_1158) (case-lambda ((expression_1130) (letrec*-values (((counter_1141) 0) ((gensym_1144) (case-lambda ((prefix_1143) (letrec*-values (((symbol_1142) (string->symbol (string-append prefix_1143 "_" (number->string counter_1141))))) (set! counter_1141 (+ counter_1141 1)) symbol_1142)))) ((identifier-table_1145) (make-table_254 (make-eq-comparator_221))) ((lookup-identifier!_1137) (case-lambda ((location_1146) (letrec*-values (((syntax_1148) (location-syntax_1102 location_1146)) ((prefix_1147) (if syntax_1148 (symbol->string (syntax->datum_162 syntax_1148 unclose-form_895)) "g"))) (table-intern!_294 identifier-table_1145 location_1146 (case-lambda (() (letrec*-values () (gensym_1144 prefix_1147))))))))) ((formals->datum_1134) (case-lambda ((formals_1149) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_1150) (values (case-lambda ((fixed-arguments_1151) (letrec*-values () (if (null? fixed-arguments_1151) ((case-lambda ((rest-argument_1152) (letrec*-values () (if rest-argument_1152 (lookup-identifier!_1137 rest-argument_1152) (quote ()))))) (formals-rest-argument_1113 formals_1149)) (cons (lookup-identifier!_1137 (car fixed-arguments_1151)) (loop_1150 (cdr fixed-arguments_1151)))))))))) ((case-lambda (() (letrec*-values () loop_1150)))))))) (formals-fixed-arguments_1114 formals_1149)))))) ((syntax-table_1153) (make-table_254 (make-eq-comparator_221))) ((intern-syntax!_1157) (case-lambda ((syntax_1154) (letrec*-values () (table-intern!_294 syntax-table_1153 syntax_1154 (case-lambda (() (letrec*-values (((context_1156) (if (syntax-context_154 syntax_1154) (intern-syntax!_1157 (syntax-context_154 syntax_1154)) #f)) ((source-location_1155) (syntax-source-location_155 syntax_1154))) (cons (quote make-syntax) (cons (if source-location_1155 (source-location-source_314 source-location_1155) #f) (cons (if source-location_1155 (source-location-start-line_323 source-location_1155) #f) (cons (if source-location_1155 (source-location-start-column_325 source-location_1155) #f) (cons (if source-location_1155 (source-location-end-line_327 source-location_1155) #f) (cons (if source-location_1155 (source-location-end-column_329 source-location_1155) #f) (cons context_1156 (quote ()))))))))))))))))) (((case-lambda (() (letrec*-values (((loop_1131) (values (case-lambda ((expression_1132) (letrec*-values () (if (reference?_949 expression_1132) (lookup-identifier!_1137 (reference-location_951 expression_1132)) (if (primitive-reference?_956 expression_1132) (primitive-reference-symbol_958 expression_1132) (if (literal?_963 expression_1132) ((case-lambda ((value_1139) (letrec*-values () (if (self-evaluating?_972 value_1139) value_1139 (if (syntax?_152 value_1139) ((case-lambda ((source-location_1140) (letrec*-values () (list->vector (cons (source-location-source_314 source-location_1140) (cons (source-location-start-line_323 source-location_1140) (cons (source-location-start-column_325 source-location_1140) (cons (source-location-end-line_327 source-location_1140) (cons (source-location-end-column_329 source-location_1140) (quote ())))))))))) (syntax-source-location_155 value_1139)) (cons (quote quote) (cons value_1139 (quote ())))))))) (literal-value_965 expression_1132)) (if (undefined?_976 expression_1132) (cons (quote if) (cons #f (cons #f (quote ())))) (if (procedure-call?_982 expression_1132) (cons (loop_1131 (procedure-call-operator_984 expression_1132)) (append (map loop_1131 (procedure-call-operands_986 expression_1132)) (quote ()))) (if (primitive-operation?_992 expression_1132) (cons (operator-identifier_1127 (primitive-operation-operator_994 expression_1132)) (append (map loop_1131 (primitive-operation-operands_996 expression_1132)) (quote ()))) (if (expression-procedure?_1001 expression_1132) (cons (quote case-lambda) (append (map (case-lambda ((clause_1138) (letrec*-values () (cons (formals->datum_1134 (clause-formals_1009 clause_1138)) (append (map loop_1131 (clause-body_1008 clause_1138)) (quote ())))))) (procedure-clauses_1003 expression_1132)) (quote ()))) (if (assignment?_1015 expression_1132) (cons (quote set!) (cons (lookup-identifier!_1137 (assignment-location_1017 expression_1132)) (cons (loop_1131 (assignment-expression_1019 expression_1132)) (quote ())))) (if (multiple-assignment?_1025 expression_1132) (cons (quote set-values!) (cons (formals->datum_1134 (multiple-assignment-formals_1027 expression_1132)) (cons (loop_1131 (multiple-assignment-expression_1029 expression_1132)) (quote ())))) (if (letrec*-expression?_1041 expression_1132) (cons (quote letrec*-values) (cons (map (case-lambda ((binding_1136) (letrec*-values () (cons (formals->datum_1134 (binding-formals_1108 binding_1136)) (cons (loop_1131 (binding-expression_1107 binding_1136)) (quote ())))))) (letrec*-expression-bindings_1043 expression_1132)) (append (map loop_1131 (letrec*-expression-body_1045 expression_1132)) (quote ())))) (if (letrec-expression?_1051 expression_1132) (cons (quote letrec) (cons (map (case-lambda ((binding_1135) (letrec*-values () (cons (car (formals->datum_1134 (binding-formals_1108 binding_1135))) (cons (loop_1131 (binding-expression_1107 binding_1135)) (quote ())))))) (letrec-expression-bindings_1053 expression_1132)) (append (map loop_1131 (letrec-expression-body_1055 expression_1132)) (quote ())))) (if (let-values-expression?_1067 expression_1132) (cons (quote let-values) (cons (cons ((case-lambda ((binding_1133) (letrec*-values () (cons (formals->datum_1134 (binding-formals_1108 binding_1133)) (cons (loop_1131 (binding-expression_1107 binding_1133)) (quote ())))))) (let-values-expression-binding_1069 expression_1132)) (quote ())) (append (map loop_1131 (letrec-expression-body_1055 expression_1132)) (quote ())))) (if (sequence?_1080 expression_1132) (cons (quote begin) (append (map loop_1131 (sequence-expressions_1082 expression_1132)) (quote ()))) (if (conditional?_1092 expression_1132) (cons (quote if) (cons (loop_1131 (conditional-test_1094 expression_1132)) (cons (loop_1131 (conditional-consequent_1096 expression_1132)) (cons (loop_1131 (conditional-alternate_1098 expression_1132)) (quote ()))))) (error "bad expression" expression_1132))))))))))))))))))))) ((case-lambda (() (letrec*-values () loop_1131)))))))) expression_1130))))) ((expression-map_1181) (case-lambda ((transformer_1160 expression_1159) (letrec*-values () (if (reference?_949 expression_1159) expression_1159 (if (literal?_963 expression_1159) expression_1159 (if (undefined?_976 expression_1159) expression_1159 (if (procedure-call?_982 expression_1159) ((case-lambda ((operator_1179) (letrec*-values () ((case-lambda ((operands_1180) (letrec*-values () ((case-lambda (() (letrec*-values () (make-procedure-call_980 operator_1179 operands_1180 (expression-syntax_942 expression_1159))))))))) (map-in-order_687 transformer_1160 (procedure-call-operands_986 expression_1159)))))) (transformer_1160 (procedure-call-operator_984 expression_1159))) (if (primitive-operation?_992 expression_1159) ((case-lambda ((operands_1178) (letrec*-values () ((case-lambda (() (letrec*-values () (make-primitive-operation_990 (primitive-operation-operator_994 expression_1159) operands_1178 (expression-syntax_942 expression_1159))))))))) (map-in-order_687 transformer_1160 (primitive-operation-operands_996 expression_1159))) (if (expression-procedure?_1001 expression_1159) ((case-lambda ((clauses_1177) (letrec*-values () ((case-lambda (() (letrec*-values () (make-procedure_999 clauses_1177 (expression-syntax_942 expression_1159))))))))) (map-in-order_687 (case-lambda ((clause_1176) (letrec*-values () (make-clause_1005 (clause-formals_1009 clause_1176) (map-in-order_687 transformer_1160 (clause-body_1008 clause_1176)) (clause-syntax_1007 clause_1176))))) (procedure-clauses_1003 expression_1159))) (if (assignment?_1015 expression_1159) ((case-lambda ((init_1175) (letrec*-values () ((case-lambda (() (letrec*-values () (make-assignment_1013 (assignment-location_1017 expression_1159) init_1175 (expression-syntax_942 expression_1159))))))))) (transformer_1160 (assignment-expression_1019 expression_1159))) (if (multiple-assignment?_1025 expression_1159) ((case-lambda ((init_1174) (letrec*-values () ((case-lambda (() (letrec*-values () (make-multiple-assignment_1035 (multiple-assignment-formals_1027 expression_1159) init_1174 (expression-syntax_942 expression_1159))))))))) (transformer_1160 (multiple-assignment-expression_1029 expression_1159))) (if (letrec*-expression?_1041 expression_1159) ((case-lambda ((binding*_1172) (letrec*-values () ((case-lambda ((body_1173) (letrec*-values () ((case-lambda (() (letrec*-values () (make-letrec*-expression_1039 binding*_1172 body_1173 (expression-syntax_942 expression_1159))))))))) (map-in-order_687 transformer_1160 (letrec*-expression-body_1045 expression_1159)))))) (map-in-order_687 (case-lambda ((binding_1171) (letrec*-values () (make-binding_1104 (binding-formals_1108 binding_1171) (transformer_1160 (binding-expression_1107 binding_1171)) (binding-syntax_1106 binding_1171))))) (letrec*-expression-bindings_1043 expression_1159))) (if (letrec-expression?_1051 expression_1159) ((case-lambda ((binding*_1169) (letrec*-values () ((case-lambda ((body_1170) (letrec*-values () ((case-lambda (() (letrec*-values () (make-letrec-expression_1061 binding*_1169 body_1170 (expression-syntax_942 expression_1159))))))))) (map-in-order_687 transformer_1160 (letrec-expression-body_1055 expression_1159)))))) (map-in-order_687 (case-lambda ((binding_1168) (letrec*-values () (make-binding_1104 (binding-formals_1108 binding_1168) (transformer_1160 (binding-expression_1107 binding_1168)) (binding-syntax_1106 binding_1168))))) (letrec-expression-bindings_1053 expression_1159))) (if (let-values-expression?_1067 expression_1159) ((case-lambda ((binding_1166) (letrec*-values () ((case-lambda ((body_1167) (letrec*-values () ((case-lambda (() (letrec*-values () (make-let-values-expression_1075 binding_1166 body_1167 (expression-syntax_942 expression_1159))))))))) (map-in-order_687 transformer_1160 (let-values-expression-body_1071 expression_1159)))))) ((case-lambda ((binding_1165) (letrec*-values () (make-binding_1104 (binding-formals_1108 binding_1165) (transformer_1160 (binding-expression_1107 binding_1165)) (binding-syntax_1106 binding_1165))))) (let-values-expression-binding_1069 expression_1159))) (if (sequence?_1080 expression_1159) ((case-lambda ((expression*_1164) (letrec*-values () ((case-lambda (() (letrec*-values () (make-sequence_1060 expression*_1164 (expression-syntax_942 expression_1159))))))))) (map-in-order_687 transformer_1160 (sequence-expressions_1082 expression_1159))) (if (conditional?_1092 expression_1159) ((case-lambda ((test_1161) (letrec*-values () ((case-lambda ((consequent_1162) (letrec*-values () ((case-lambda ((alternate_1163) (letrec*-values () ((case-lambda (() (letrec*-values () (make-conditional_1090 test_1161 consequent_1162 alternate_1163 (expression-syntax_942 expression_1159))))))))) (transformer_1160 (conditional-alternate_1098 expression_1159)))))) (transformer_1160 (conditional-consequent_1096 expression_1159)))))) (transformer_1160 (conditional-test_1094 expression_1159))) (error "unknown expression type" expression_1159)))))))))))))))))) ((expression-for-each_1189) (case-lambda ((visitor_1183 expression_1182) (letrec*-values () ((case-lambda ((temp_1188) (letrec*-values () (if temp_1188 temp_1188 ((case-lambda ((temp_1187) (letrec*-values () (if temp_1187 temp_1187 ((case-lambda ((temp_1186) (letrec*-values () (if temp_1186 temp_1186 (if (procedure-call?_982 expression_1182) (begin (visitor_1183 (procedure-call-operator_984 expression_1182)) (for-each visitor_1183 (procedure-call-operands_986 expression_1182))) (if (primitive-operation?_992 expression_1182) (for-each visitor_1183 (primitive-operation-operands_996 expression_1182)) (if (expression-procedure?_1001 expression_1182) (for-each (case-lambda ((clause_1185) (letrec*-values () (for-each visitor_1183 (clause-body_1008 clause_1185))))) (procedure-clauses_1003 expression_1182)) (if (assignment?_1015 expression_1182) (visitor_1183 (assignment-expression_1019 expression_1182)) (if (letrec*-expression?_1041 expression_1182) (begin (for-each (case-lambda ((binding_1184) (letrec*-values () (visitor_1183 (binding-expression_1107 binding_1184))))) (letrec*-expression-bindings_1043 expression_1182)) (for-each visitor_1183 (letrec*-expression-body_1045 expression_1182))) (if (sequence?_1080 expression_1182) (for-each visitor_1183 (sequence-expressions_1082 expression_1182)) (if (conditional?_1092 expression_1182) (begin (visitor_1183 (conditional-test_1094 expression_1182)) (visitor_1183 (conditional-consequent_1096 expression_1182)) (visitor_1183 (conditional-alternate_1098 expression_1182))) (error "unknown expression type" expression_1182)))))))))))) (undefined?_976 expression_1182)))))) (literal?_963 expression_1182)))))) (reference?_949 expression_1182)) (if #f #f (if #f #f)))))) ((operator-eq?_1190) (make-operator_1125 (quote eq?))) ((operator-boolean?_1191) (make-operator_1125 (quote boolean?))) ((string->number_1192) (make-operator_1125 (quote string->number))) ((number->string_1193) (make-operator_1125 (quote number->string))) ((operator-fixnum?_1194) (make-operator_1125 (quote fixnum?))) ((operator-fxnegative?_1195) (make-operator_1125 (quote fxnegative?))) ((operator-fx<_1196) (make-operator_1125 (quote fx<))) ((operator-fx=_1197) (make-operator_1125 (quote fx=))) ((operator-fx+_1198) (make-operator_1125 (quote fx+))) ((operator-fx-_1199) (make-operator_1125 (quote fx-))) ((operator-flonum?_1200) (make-operator_1125 (quote flonum?))) ((operator-nan?_1201) (make-operator_1125 (quote nan?))) ((operator-exact?_1202) (make-operator_1125 (quote exact?))) ((operator-cons_1203) (make-operator_1125 (quote cons))) ((operator-car_1204) (make-operator_1125 (quote car))) ((operator-cdr_1205) (make-operator_1125 (quote cdr))) ((operator-set-car!_1206) (make-operator_1125 (quote set-car!))) ((operator-set-cdr!_1207) (make-operator_1125 (quote set-cdr!))) ((operator-pair?_1208) (make-operator_1125 (quote pair?))) ((operator-null?_1209) (make-operator_1125 (quote null?))) ((operator-symbol?_1210) (make-operator_1125 (quote symbol?))) ((operator-symbol->string_1211) (make-operator_1125 (quote symbol->string))) ((operator-string?_1212) (make-operator_1125 (quote string?))) ((operator-string->list_1213) (make-operator_1125 (quote string->list))) ((operator-list->string_1214) (make-operator_1125 (quote list->string))) ((operator-number->string_1215) (make-operator_1125 (quote number->string))) ((operator-string->number_1216) (make-operator_1125 (quote string->number))) ((operator-char?_1217) (make-operator_1125 (quote char?))) ((operator-make-vector_1218) (make-operator_1125 (quote make-vector))) ((operator-vector-ref_1219) (make-operator_1125 (quote vector-ref))) ((operator-vector-set!_1220) (make-operator_1125 (quote vector-set!))) ((operator-vector?_1221) (make-operator_1125 (quote vector?))) ((operator-vector-length_1222) (make-operator_1125 (quote vector-length))) ((operator-procedure?_1223) (make-operator_1125 (quote procedure?))) ((operator-apply_1224) (make-operator_1125 (quote apply))) ((operator-call-with-current-continuation_1225) (make-operator_1125 (quote call-with-current-continuation))) ((operator-error_1226) (make-operator_1125 (quote error))) ((operator-set-exception-handler!_1227) (make-operator_1125 (quote set-exception-handler!))) ((operator-exit_1228) (make-operator_1125 (quote exit))) ((operator-current-output-port_1229) (make-operator_1125 (quote current-output-port))) ((operator-write-char_1230) (make-operator_1125 (quote write-char))) ((operator-make-rtd_1231) (make-operator_1125 (quote make-rtd))) ((operator-rtd-constructor_1232) (make-operator_1125 (quote rtd-constructor))) ((operator-rtd-predicate_1233) (make-operator_1125 (quote rtd-predicate))) ((operator-rtd-accessor_1234) (make-operator_1125 (quote rtd-accessor))) ((operator-rtd-mutator_1235) (make-operator_1125 (quote rtd-mutator))) ((operator-ccm_1236) (make-operator_1125 (quote ccm))) ((operator-wcm_1237) (make-operator_1125 (quote wcm))) ((operator+_1238) (make-operator_1125 (quote +))) ((operator-display_1239) (make-operator_1125 (quote display))) ((operator-newline_1240) (make-operator_1125 (quote newline))) ((operator-string-append_1241) (make-operator_1125 (quote string-append))) ((current-bindings_1242) (make-parameter_2 #f box_146)) ((%get-bindings_1243) (case-lambda (() (letrec*-values () (unbox_148 (current-bindings_1242)))))) ((get-bindings_1244) (case-lambda (() (letrec*-values () (reverse (%get-bindings_1243)))))) ((set-bindings!_1246) (case-lambda ((bindings_1245) (letrec*-values () (set-box!_149 (current-bindings_1242) bindings_1245))))) ((current-expressions_1247) (make-parameter_2 #f box_146)) ((%get-expressions_1248) (case-lambda (() (letrec*-values () (unbox_148 (current-expressions_1247)))))) ((get-expressions_1249) (case-lambda (() (letrec*-values () (reverse (%get-expressions_1248)))))) ((set-expressions!_1251) (case-lambda ((expressions_1250) (letrec*-values () (set-box!_149 (current-expressions_1247) expressions_1250))))) ((current-context_1252) (make-parameter_2 (quote top-level))) ((top-level-context?_1253) (case-lambda (() (letrec*-values () (eq? (current-context_1252) (quote top-level)))))) ((body-context?_1254) (case-lambda (() (letrec*-values () (eq? (current-context_1252) (quote body)))))) ((expression-context?_1255) (case-lambda (() (letrec*-values () (eq? (current-context_1252) (quote expression)))))) ((make-%binding_1259) (case-lambda ((formals_1256 expression-syntax_1257 syntax_1258) (letrec*-values () (vector formals_1256 expression-syntax_1257 syntax_1258))))) ((expand-%binding_1262) (case-lambda ((%binding_1260) (letrec*-values () (if (binding?_1105 %binding_1260) %binding_1260 (make-binding_1104 (vector-ref %binding_1260 0) (expand-expression_1261 (vector-ref %binding_1260 1)) (vector-ref %binding_1260 2))))))) ((expand-into-transformer_1266) (case-lambda ((transformer_1263 syntax_1264) (letrec*-values () ((%expand-into-transformer_1265) transformer_1263 syntax_1264))))) ((%expand-into-transformer_1265) (make-parameter_2 (case-lambda ((transformer_1268 syntax_1267) (letrec*-values () (compile-error_591 "unexpected transformer spec" syntax_1267)))))) ((expand-into-expression_1271) (case-lambda ((expression_1269) (letrec*-values () ((%expand-into-expression_1270) expression_1269))))) ((%expand-into-expression_1270) (make-parameter_2 #f)) ((insert-location!_1274) (case-lambda ((identifier-syntax_1272) (letrec*-values (((location_1273) (make-location_1100 identifier-syntax_1272))) (insert-binding!_842 identifier-syntax_1272 location_1273) location_1273)))) ((expand-into-definition_1284) (case-lambda ((fixed-variables_1277 rest-variable_1278 formals-syntax_1281 expression-syntax_1283 definition-syntax_1275) (letrec*-values () (if (expression-context?_1255) (begin (compile-error_591 "unexpected definition" definition-syntax_1275) (if #f #f (if #f #f))) (if #f #f)) ((case-lambda ((expressions_1276) (letrec*-values () (if (if expressions_1276 (not (null? expressions_1276)) #f) (begin (compile-error_591 "definitions may not follow expressions in a body" definition-syntax_1275) (if #f #f (if #f #f))) (if #f #f)) ((case-lambda ((fixed-locations_1279) (letrec*-values () ((case-lambda ((rest-location_1280) (letrec*-values () ((case-lambda ((formals_1282) (letrec*-values () ((case-lambda (() (letrec*-values () (set-bindings!_1246 (cons (make-%binding_1259 formals_1282 expression-syntax_1283 definition-syntax_1275) (%get-bindings_1243)))))))))) (make-formals_1117 fixed-locations_1279 rest-location_1280 formals-syntax_1281))))) (if rest-variable_1278 (insert-location!_1274 rest-variable_1278) #f))))) (map insert-location!_1274 fixed-variables_1277))))) (%get-expressions_1248)))))) ((expand-into-record-type-definition_1311) (case-lambda ((name-syntax_1286 constructor-name-syntax_1287 field-name-syntax*_1295 pred-syntax_1288 field*_1290 syntax_1285) (letrec*-values () (if (expression-context?_1255) (begin (compile-error_591 "unexpected record-type definition" syntax_1285) (if #f #f (if #f #f))) (if #f #f)) ((case-lambda ((name-location_1293) (letrec*-values () ((case-lambda ((constructor-name-location_1308) (letrec*-values () ((case-lambda ((pred-location_1306) (letrec*-values () ((case-lambda ((accessor-location*_1298) (letrec*-values () ((case-lambda ((mutator-location*_1299) (letrec*-values () ((case-lambda ((name-expression_1310) (letrec*-values () ((case-lambda ((constructor-name-expression_1309) (letrec*-values () ((case-lambda ((pred-expression_1307) (letrec*-values () ((case-lambda ((accessor-binding*_1305) (letrec*-values () ((case-lambda ((mutator-binding*_1304) (letrec*-values () ((case-lambda (() (letrec*-values () (set-bindings!_1246 (append mutator-binding*_1304 accessor-binding*_1305 (list (make-binding_1104 (make-formals_1117 (list pred-location_1306) #f #f) pred-expression_1307 #f) (make-binding_1104 (make-formals_1117 (list constructor-name-location_1308) #f #f) constructor-name-expression_1309 #f) (make-binding_1104 (make-formals_1117 (list name-location_1293) #f #f) name-expression_1310 #f)) (%get-bindings_1243)))))))))) (((case-lambda (() (letrec*-values (((loop_1300) (values (case-lambda ((location*_1302 field*_1301) (letrec*-values () (if (null? field*_1301) (quote ()) ((case-lambda ((field_1303) (letrec*-values () (if (car location*_1302) (cons (make-binding_1104 (make-formals_1117 (list (car location*_1302)) #f #f) (make-primitive-operation_990 operator-rtd-mutator_1235 (list (make-reference_947 name-location_1293 #f) (make-literal_961 (syntax-datum_156 (car field_1303)) (car field_1303))) #f) #f) (loop_1300 (cdr location*_1302) (cdr field*_1301))) (loop_1300 (cdr location*_1302) (cdr field*_1301)))))) (car field*_1301))))))))) ((case-lambda (() (letrec*-values () loop_1300)))))))) mutator-location*_1299 field*_1290))))) (map (case-lambda ((location_1296 field_1297) (letrec*-values () (make-binding_1104 (make-formals_1117 (list location_1296) #f #f) (make-primitive-operation_990 operator-rtd-accessor_1234 (list (make-reference_947 name-location_1293 #f) (make-literal_961 (syntax-datum_156 (car field_1297)) (car field_1297))) #f) #f)))) accessor-location*_1298 field*_1290))))) (make-primitive-operation_990 operator-rtd-predicate_1233 (list (make-reference_947 name-location_1293 #f)) #f))))) (make-primitive-operation_990 operator-rtd-constructor_1232 (cons (make-reference_947 name-location_1293 #f) (map (case-lambda ((field-name-syntax_1294) (letrec*-values () (make-literal_961 (syntax-datum_156 field-name-syntax_1294) field-name-syntax_1294)))) field-name-syntax*_1295)) #f))))) (make-primitive-operation_990 operator-make-rtd_1231 (cons (make-literal_961 (syntax-datum_156 name-syntax_1286) name-syntax_1286) (map (case-lambda ((field_1292) (letrec*-values () (make-literal_961 (syntax-datum_156 (car field_1292)) (car field_1292))))) field*_1290)) #f))))) (map-in-order_687 (case-lambda ((field_1291) (letrec*-values () (if (= (length field_1291) 3) (insert-location!_1274 (list-ref field_1291 2)) #f)))) field*_1290))))) (map-in-order_687 (case-lambda ((field_1289) (letrec*-values () (insert-location!_1274 (list-ref field_1289 1))))) field*_1290))))) (insert-location!_1274 pred-syntax_1288))))) (insert-location!_1274 constructor-name-syntax_1287))))) (insert-location!_1274 name-syntax_1286)))))) ((expand-into-syntax-definition_1316) (case-lambda ((identifier-syntax_1314 expander_1315 syntax_1312) (letrec*-values () (if (expression-context?_1255) (begin (compile-error_591 "unexpected syntax definition" syntax_1312) (if #f #f (if #f #f))) (if #f #f)) ((case-lambda ((expressions_1313) (letrec*-values () (if (if expressions_1313 (not (null? expressions_1313)) #f) (begin (compile-error_591 "syntax definitions may not follow expressions in a body" syntax_1312) (if #f #f (if #f #f))) (if #f #f)) (insert-binding!_842 identifier-syntax_1314 expander_1315)))) (%get-expressions_1248)))))) ((expand-into-sequence_1320) (case-lambda ((syntax*_1318 syntax_1319) (letrec*-values () (if (eq? (current-context_1252) (quote expression)) (begin (if (null? syntax*_1318) (begin (compile-error_591 "begin expression may not be empty" syntax_1319) (if #f #f (if #f #f))) (if #f #f)) (make-sequence_1060 (map-in-order_687 expand-expression_1261 syntax*_1318) syntax_1319)) (for-each expand-syntax!_1317 syntax*_1318)))))) ((expand-top-level_1333) (case-lambda ((syntax*_1327) (letrec*-values () ((case-lambda ((p_1321 p_1322) (letrec*-values () ((case-lambda ((old_1331 old_1332 new_1325 new_1326) (letrec*-values () (dynamic-wind (case-lambda (() (letrec*-values () (p_1321 <param-set!>_7 new_1325) (p_1322 <param-set!>_7 new_1326)))) (case-lambda (() (letrec*-values () (for-each expand-syntax!_1317 syntax*_1327) ((case-lambda ((p_1328) (letrec*-values () ((case-lambda ((old_1330 new_1329) (letrec*-values () (dynamic-wind (case-lambda (() (letrec*-values () (p_1328 <param-set!>_7 new_1329)))) (case-lambda (() (letrec*-values () (map-in-order_687 expand-%binding_1262 (get-bindings_1244))))) (case-lambda (() (letrec*-values () (p_1328 <param-set!>_7 old_1330)))))))) (p_1328) ((p_1328 <param-convert>_5) (quote expression)))))) current-context_1252)))) (case-lambda (() (letrec*-values () (p_1321 <param-set!>_7 old_1331) (p_1322 <param-set!>_7 old_1332)))))))) (p_1321) (p_1322) ((p_1321 <param-convert>_5) (case-lambda ((expression_1324) (letrec*-values () (set-bindings!_1246 (cons (make-binding_1104 (make-dummy-formals_1323) expression_1324 #f) (%get-bindings_1243))))))) ((p_1322 <param-convert>_5) (quote ())))))) %expand-into-expression_1270 current-bindings_1242))))) ((expand-body_1352) (case-lambda ((syntax*_1343 syntax_1344) (letrec*-values () ((case-lambda ((p_1334 p_1335 p_1336 p_1337) (letrec*-values () ((case-lambda ((old_1348 old_1349 old_1350 old_1351 new_1339 new_1340 new_1341 new_1342) (letrec*-values () (dynamic-wind (case-lambda (() (letrec*-values () (p_1334 <param-set!>_7 new_1339) (p_1335 <param-set!>_7 new_1340) (p_1336 <param-set!>_7 new_1341) (p_1337 <param-set!>_7 new_1342)))) (case-lambda (() (letrec*-values () (for-each expand-syntax!_1317 syntax*_1343) (if (null? (%get-expressions_1248)) (begin (compile-error_591 "no expression in body" syntax_1344) (if #f #f (if #f #f))) (if #f #f)) ((case-lambda ((p_1345) (letrec*-values () ((case-lambda ((old_1347 new_1346) (letrec*-values () (dynamic-wind (case-lambda (() (letrec*-values () (p_1345 <param-set!>_7 new_1346)))) (case-lambda (() (letrec*-values () (make-letrec*-expression_1039 (map expand-%binding_1262 (get-bindings_1244)) (get-expressions_1249) #f)))) (case-lambda (() (letrec*-values () (p_1345 <param-set!>_7 old_1347)))))))) (p_1345) ((p_1345 <param-convert>_5) (quote expression)))))) current-context_1252)))) (case-lambda (() (letrec*-values () (p_1334 <param-set!>_7 old_1348) (p_1335 <param-set!>_7 old_1349) (p_1336 <param-set!>_7 old_1350) (p_1337 <param-set!>_7 old_1351)))))))) (p_1334) (p_1335) (p_1336) (p_1337) ((p_1334 <param-convert>_5) (case-lambda ((expression_1338) (letrec*-values () (set-expressions!_1251 (cons expression_1338 (%get-expressions_1248))))))) ((p_1335 <param-convert>_5) (quote ())) ((p_1336 <param-convert>_5) (quote ())) ((p_1337 <param-convert>_5) (quote body)))))) %expand-into-expression_1270 current-expressions_1247 current-bindings_1242 current-context_1252))))) ((expand-transformer_1367) (case-lambda ((syntax_1359) (letrec*-values () (call-with-current-continuation (case-lambda ((return_1357) (letrec*-values () ((case-lambda ((p_1353 p_1354 p_1355) (letrec*-values () ((case-lambda ((old_1364 old_1365 old_1366 new_1361 new_1362 new_1363) (letrec*-values () (dynamic-wind (case-lambda (() (letrec*-values () (p_1353 <param-set!>_7 new_1361) (p_1354 <param-set!>_7 new_1362) (p_1355 <param-set!>_7 new_1363)))) (case-lambda (() (letrec*-values () (expand-syntax!_1317 syntax_1359)))) (case-lambda (() (letrec*-values () (p_1353 <param-set!>_7 old_1364) (p_1354 <param-set!>_7 old_1365) (p_1355 <param-set!>_7 old_1366)))))))) (p_1353) (p_1354) (p_1355) ((p_1353 <param-convert>_5) (case-lambda ((transformer_1356 syntax_1358) (letrec*-values () (return_1357 transformer_1356))))) ((p_1354 <param-convert>_5) (case-lambda ((expression_1360) (letrec*-values () (compile-error_591 "not a macro transformer" syntax_1359))))) ((p_1355 <param-convert>_5) (quote expression)))))) %expand-into-transformer_1265 %expand-into-expression_1270 current-context_1252))))))))) ((expand-expression_1261) (case-lambda ((syntax_1373) (letrec*-values () (call-with-current-continuation (case-lambda ((return_1370) (letrec*-values () ((case-lambda ((p_1368 p_1369) (letrec*-values () ((case-lambda ((old_1374 old_1375 new_1371 new_1372) (letrec*-values () (dynamic-wind (case-lambda (() (letrec*-values () (p_1368 <param-set!>_7 new_1371) (p_1369 <param-set!>_7 new_1372)))) (case-lambda (() (letrec*-values () (expand-syntax!_1317 syntax_1373)))) (case-lambda (() (letrec*-values () (p_1368 <param-set!>_7 old_1374) (p_1369 <param-set!>_7 old_1375)))))))) (p_1368) (p_1369) ((p_1368 <param-convert>_5) return_1370) ((p_1369 <param-convert>_5) (quote expression)))))) %expand-into-expression_1270 current-context_1252))))))))) ((expand-expression*_1377) (case-lambda ((syntax*_1376) (letrec*-values () (map-in-order_687 expand-expression_1261 syntax*_1376))))) ((expand-syntax!_1317) (case-lambda ((syntax_1379) (letrec*-values (((thunk_1378) (case-lambda (() (letrec*-values () (%expand-syntax!_1380 syntax_1379)))))) (if (eq? (current-context_1252) (quote top-level)) (with-isolated-references_795 thunk_1378) (thunk_1378)))))) ((%expand-syntax!_1380) (case-lambda ((syntax_1381) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_1382) (values (case-lambda ((form_1383) (letrec*-values () (if (simple-datum?_1390 form_1383) (expand-into-expression_1271 (make-literal_961 form_1383 syntax_1381)) (if (null? form_1383) (compile-error_591 "empty application in source" syntax_1381) (if (identifier?_892 form_1383) ((case-lambda ((temp_1388) (letrec*-values () (if temp_1388 ((case-lambda ((denotation_1389) (letrec*-values () (if (primitive?_806 denotation_1389) (expand-into-expression_1271 (make-primitive-reference_954 (primitive-symbol_808 denotation_1389) syntax_1381)) (if (procedure? denotation_1389) (begin (compile-note_597 (format_99 "identifier ‘~a’ was bound here" (unclose-form_895 form_1383)) (sc-lookup-syntax!_938 form_1383)) (compile-error_591 (format_99 "invalid use of syntax ‘~a’ as value" (unclose-form_895 form_1383)) syntax_1381)) (expand-into-expression_1271 (make-reference_947 denotation_1389 syntax_1381))))))) temp_1388) (compile-error_591 (format_99 "undefined variable ‘~a’" (unclose-form_895 form_1383)) syntax_1381))))) (sc-lookup-denotation!_905 form_1383)) (if (list? form_1383) ((case-lambda ((temp_1386) (letrec*-values () (if temp_1386 ((case-lambda ((transform!_1387) (letrec*-values () (transform!_1387 syntax_1381)))) temp_1386) ((case-lambda ((operator_1385) (letrec*-values () (expand-into-expression_1271 (make-procedure-call_980 operator_1385 (expand-expression*_1377 (cdr form_1383)) syntax_1381))))) (expand-expression_1261 (car form_1383))))))) (lookup-transformer!_1384 (car form_1383))) (if (syntactic-closure?_882 form_1383) (call-in-syntactic-closure_926 form_1383 loop_1382) (compile-error_591 (format_99 "invalid form ‘~a’" (list? form_1383)) syntax_1381)))))))))))) ((case-lambda (() (letrec*-values () loop_1382)))))))) (syntax-datum_156 syntax_1381)))))) ((lookup-transformer!_1384) (case-lambda ((syntax_1393) (letrec*-values (((form_1391) (syntax-datum_156 syntax_1393))) (if (identifier?_892 form_1391) ((case-lambda ((denotation_1392) (letrec*-values () (if (procedure? denotation_1392) denotation_1392 #f)))) (sc-lookup-denotation!_905 form_1391)) #f))))) ((make-dummy-formals_1323) (case-lambda (() (letrec*-values () (make-formals_1117 (list (make-location_1100 #f)) #f #f))))) ((simple-datum?_1390) (case-lambda ((expression_1394) (letrec*-values () ((case-lambda ((x_1399) (letrec*-values () (if x_1399 x_1399 ((case-lambda ((x_1398) (letrec*-values () (if x_1398 x_1398 ((case-lambda ((x_1397) (letrec*-values () (if x_1397 x_1397 ((case-lambda ((x_1396) (letrec*-values () (if x_1396 x_1396 ((case-lambda ((x_1395) (letrec*-values () (if x_1395 x_1395 (vector? expression_1394))))) (bytevector? expression_1394)))))) (string? expression_1394)))))) (char? expression_1394)))))) (boolean? expression_1394)))))) (number? expression_1394)))))) ((<environment>_1400) (make-rtd (quote <environment>) (quote bindings) (quote syntactic-environment))) ((make-environment_1401) (rtd-constructor <environment>_1400 (quote bindings) (quote syntactic-environment))) ((environment?_1402) (rtd-predicate <environment>_1400)) ((environment-syntactic-environment_1403) (rtd-accessor <environment>_1400 (quote syntactic-environment))) ((environment-bindings_1404) (rtd-accessor <environment>_1400 (quote bindings))) ((rapid-features_1405) (quote (r7rs exact-closed exact-complex ieee-float full-unicode ratios posix rapid-scheme rapid-scheme-0.1))) ((read-library_1425) (case-lambda ((library-name-syntax_1422) (letrec*-values (((library-definition-syntax_1424) (read-library-definition_1423 library-name-syntax_1422)) ((form_1406) (syntax-datum_156 library-definition-syntax_1424))) (((case-lambda (() (letrec*-values (((loop_1407) (values (case-lambda ((declarations_1408 import-sets_1416 export-specs_1417 body_1418) (letrec*-values () (if (null? declarations_1408) (values (reverse import-sets_1416) (reverse export-specs_1417) (reverse body_1418)) ((case-lambda ((declaration_1409) (letrec*-values () ((case-lambda ((declarations_1415) (letrec*-values () ((case-lambda ((form_1410) (letrec*-values () ((case-lambda (() (letrec*-values () (if (not (if (not (null? form_1410)) (list? form_1410) #f)) (begin (compile-error_591 "bad library declaration" declaration_1409) (if #f #f (if #f #f))) (if #f #f)) ((case-lambda ((atom-key_1420) (letrec*-values () (if (memv atom-key_1420 (quote (export))) (loop_1407 declarations_1415 import-sets_1416 (append (reverse (cdr form_1410)) export-specs_1417) body_1418) (if (memv atom-key_1420 (quote (import))) (loop_1407 declarations_1415 (append (reverse (cdr form_1410)) import-sets_1416) export-specs_1417 body_1418) (if (memv atom-key_1420 (quote (begin))) (loop_1407 declarations_1415 import-sets_1416 export-specs_1417 (append (reverse (cdr form_1410)) body_1418)) (if (memv atom-key_1420 (quote (include))) (loop_1407 declarations_1415 import-sets_1416 export-specs_1417 (generator-fold_137 cons body_1418 (read-file*_1421 (cdr form_1410) #f))) (if (memv atom-key_1420 (quote (include-ci))) (loop_1407 declarations_1415 import-sets_1416 export-specs_1417 (generator-fold_137 cons body_1418 (read-file*_1421 (cdr form_1410) #t))) (if (memv atom-key_1420 (quote (include-library-declarations))) (loop_1407 (generator-fold_137 cons declarations_1415 (read-file*_1421 (cdr form_1410) #f)) import-sets_1416 export-specs_1417 body_1418) (if (memv atom-key_1420 (quote (cond-expand))) (((case-lambda (() (letrec*-values (((loop-clauses_1411) (values (case-lambda ((clauses_1412) (letrec*-values () (if (null? clauses_1412) (loop_1407 declarations_1415 import-sets_1416 export-specs_1417 body_1418) ((case-lambda ((clause_1413) (letrec*-values (((form_1414) (syntax-datum_156 clause_1413))) (if (not (if (list? form_1414) (>= (length form_1414) 1) #f)) (begin (compile-error_591 "bad cond-expand clause" clause_1413) (if #f #f (if #f #f))) (if #f #f)) (if (eq? (car form_1414) (quote else)) (begin (if (not (null? (cdr clauses_1412))) (begin (compile-error_591 "else clause not last" declaration_1409) (if #f #f (if #f #f))) (if #f #f)) (loop_1407 (append (cdr form_1414) declarations_1415) import-sets_1416 export-specs_1417 body_1418)) (if (feature?_1419 (car form_1414)) (loop_1407 (append (cdr form_1414) declarations_1415) import-sets_1416 export-specs_1417 body_1418) (loop-clauses_1411 (cdr clauses_1412))))))) (car clauses_1412))))))))) ((case-lambda (() (letrec*-values () loop-clauses_1411)))))))) (cdr form_1410)) (compile-error_591 "invalid library declaration" declaration_1409))))))))))) (syntax-datum_156 (car form_1410)))))))))) (syntax-datum_156 declaration_1409))))) (cdr declarations_1408))))) (car declarations_1408))))))))) ((case-lambda (() (letrec*-values () loop_1407)))))))) (cddr form_1406) (quote ()) (quote ()) (quote ())))))) ((feature?_1419) (case-lambda ((feature-requirement-syntax_1426) (letrec*-values (((form_1427) (syntax-datum_156 feature-requirement-syntax_1426))) (if (symbol? form_1427) (assq form_1427 rapid-features_1405) (if (if (not (null? form_1427)) (list? form_1427) #f) ((case-lambda ((atom-key_1428) (letrec*-values () (if (memv atom-key_1428 (quote (library))) (begin (if (not (= (length form_1427) 2)) (begin (compile-error_591 "bad library feature requirement" feature-requirement-syntax_1426) (if #f #f (if #f #f))) (if #f #f)) ((call-with-current-continuation (case-lambda ((guard-k_1441) (letrec*-values () (with-exception-handler (case-lambda ((condition_1438) (letrec*-values () ((call-with-current-continuation (case-lambda ((handler-k_1439) (letrec*-values () (guard-k_1441 (case-lambda (() (letrec*-values () ((case-lambda ((condition_1440) (letrec*-values () (if (compile-error-object?_571 condition_1440) #f (handler-k_1439 (case-lambda (() (letrec*-values () (raise-continuable condition_1438))))))))) condition_1438))))))))))))) (case-lambda (() (letrec*-values () (call-with-values (case-lambda (() (letrec*-values () (read-library-definition_1423 (cadr form_1427)) #t))) (case-lambda (args_1442 (letrec*-values () (guard-k_1441 (case-lambda (() (letrec*-values () (apply values args_1442))))))))))))))))))) (if (memv atom-key_1428 (quote (and))) (((case-lambda (() (letrec*-values (((loop_1434) (values (case-lambda ((feature-requirement-syntax*_1435) (letrec*-values () (if (null? feature-requirement-syntax*_1435) #t ((case-lambda ((r1_1437) (letrec*-values () ((case-lambda ((r2_1436) (letrec*-values () ((case-lambda (() (letrec*-values () (if r1_1437 r2_1436 #f)))))))) (loop_1434 (cdr feature-requirement-syntax*_1435)))))) (feature?_1419 (car feature-requirement-syntax*_1435)))))))))) ((case-lambda (() (letrec*-values () loop_1434)))))))) (cdr form_1427)) (if (memv atom-key_1428 (quote (or))) (((case-lambda (() (letrec*-values (((loop_1429) (values (case-lambda ((feature-requirement-syntax*_1430) (letrec*-values () (if (null? feature-requirement-syntax*_1430) #f ((case-lambda ((r1_1431) (letrec*-values () ((case-lambda ((r2_1432) (letrec*-values () ((case-lambda (() (letrec*-values () ((case-lambda ((x_1433) (letrec*-values () (if x_1433 x_1433 r2_1432)))) r1_1431)))))))) (loop_1429 (cdr feature-requirement-syntax*_1430)))))) (feature?_1419 (car feature-requirement-syntax*_1430)))))))))) ((case-lambda (() (letrec*-values () loop_1429)))))))) (cdr form_1427)) (if (memv atom-key_1428 (quote (not))) (begin (if (not (= (length form_1427) 2)) (begin (compile-error_591 "bad not feature requirement" feature-requirement-syntax_1426) (if #f #f (if #f #f))) (if #f #f)) (not (feature?_1419 (cadr form_1427)))) (compile-error_591 "invalid feature requirement" feature-requirement-syntax_1426)))))))) (syntax-datum_156 (car form_1427))) (compile-error_591 "bad feature requirement" feature-requirement-syntax_1426))))))) ((read-library-definition_1423) (case-lambda ((library-name-syntax_1445) (letrec*-values (((library-name_1444) (syntax->datum_162 library-name-syntax_1445)) ((locate-library_1447) (case-lambda ((path_1460) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_1461) (values (case-lambda ((filename_1462 library-name_1463) (letrec*-values () (if (null? library-name_1463) (string-append filename_1462 ".sld") (loop_1461 (path-join_302 filename_1462 (symbol->string (car library-name_1463))) (cdr library-name_1463))))))))) ((case-lambda (() (letrec*-values () loop_1461)))))))) path_1460 library-name_1444)))))) (((case-lambda (() (letrec*-values (((path-loop_1443) (values (case-lambda ((paths_1446) (letrec*-values () (if (null? paths_1446) (begin (compile-error_591 (format_99 "library definition of ‘~a’ not found in search paths" library-name_1444) library-name-syntax_1445) (if #f #f (if #f #f))) (if #f #f)) ((case-lambda ((x_1459) (letrec*-values () (if x_1459 x_1459 (path-loop_1443 (cdr paths_1446)))))) ((case-lambda ((source_1452) (letrec*-values () (if source_1452 (if (file-exists? source_1452) ((case-lambda ((read-syntax_1458) (letrec*-values () (if read-syntax_1458 (begin #t (((case-lambda (() (letrec*-values (((loop_1454) (values (case-lambda (() (letrec*-values (((syntax_1455) (read-syntax_1458))) (if (not (eof-object? syntax_1455)) ((case-lambda ((form_1456) (letrec*-values () (if (if (list? form_1456) (if (>= (length form_1456) 2) (eq? (syntax-datum_156 (car form_1456)) (quote define-library)) #f) #f) (begin (assert-library-name!_1457 (cadr form_1456)) (if (equal? (syntax->datum_162 (cadr form_1456)) library-name_1444) syntax_1455 (loop_1454))) (loop_1454))))) (syntax-datum_156 syntax_1455)) #f))))))) ((case-lambda (() (letrec*-values () loop_1454)))))))))) #f)))) ((call-with-current-continuation (case-lambda ((guard-k_1450) (letrec*-values () (with-exception-handler (case-lambda ((condition_1448) (letrec*-values () ((call-with-current-continuation (case-lambda ((handler-k_1451) (letrec*-values () (guard-k_1450 (case-lambda (() (letrec*-values () ((case-lambda ((condition_1449) (letrec*-values () (if (file-error? condition_1449) #f (raise condition_1449))))) condition_1448))))))))))))) (case-lambda (() (letrec*-values () (call-with-values (case-lambda (() (letrec*-values () (read-file_382 source_1452 #f library-name-syntax_1445)))) (case-lambda (args_1453 (letrec*-values () (guard-k_1450 (case-lambda (() (letrec*-values () (apply values args_1453))))))))))))))))))) #f) #f)))) (locate-library_1447 (car paths_1446)))))))))) ((case-lambda (() (letrec*-values () path-loop_1443)))))))) (current-search-paths_101)))))) ((read-file*_1421) (case-lambda ((string-syntax*_1467 ci?_1465) (letrec*-values () (apply gappend_127 (map-in-order_687 (case-lambda ((string-syntax_1464) (letrec*-values () (%read-file_1466 string-syntax_1464 ci?_1465)))) string-syntax*_1467)))))) ((%read-file_1466) (case-lambda ((string-syntax_1468 ci?_1470) (letrec*-values (((filename_1469) (syntax-datum_156 string-syntax_1468))) (if (not (string? filename_1469)) (begin (compile-error_591 "bad string literal" string-syntax_1468) (if #f #f (if #f #f))) (if #f #f)) (read-file_382 (locate-file_372 filename_1469 string-syntax_1468) ci?_1470 string-syntax_1468))))) ((assert-library-name!_1457) (case-lambda ((library-name-syntax_1471) (letrec*-values (((form_1473) (syntax-datum_156 library-name-syntax_1471)) ((library-name?_1472) (case-lambda (() (letrec*-values () (if (list? form_1473) (((case-lambda (() (letrec*-values (((loop_1474) (values (case-lambda ((form_1475) (letrec*-values () ((case-lambda ((x_1478) (letrec*-values () (if x_1478 x_1478 ((case-lambda ((datum_1476) (letrec*-values () (if ((case-lambda ((x_1477) (letrec*-values () (if x_1477 x_1477 (symbol? datum_1476))))) (if (exact-integer? datum_1476) (>= datum_1476 0) #f)) (loop_1474 (cdr form_1475)) #f)))) (syntax-datum_156 (car form_1475))))))) (null? form_1475)))))))) ((case-lambda (() (letrec*-values () loop_1474)))))))) form_1473) #f)))))) (if (not (library-name?_1472)) (begin (compile-error_591 "bad library name" library-name-syntax_1471) (if #f #f (if #f #f))) (if #f #f)))))) ((*transformer-environment*_1479) (environment (quote (scheme base)) (quote (rapid lists)))) ((make-er-macro-transformer_1490) (case-lambda ((transformer_1483 macro-environment_1486) (letrec*-values () (case-lambda ((syntax_1480 environment_1487) (letrec*-values (((renames_1484) (make-table_254 (make-eq-comparator_221))) ((rename_1481) (case-lambda ((identifier_1485) (letrec*-values () (table-intern!_294 renames_1484 identifier_1485 (case-lambda (() (letrec*-values () (make-syntactic-closure_881 macro-environment_1486 (quote ()) identifier_1485))))))))) ((compare_1482) (case-lambda ((identifier1_1488 identifier2_1489) (letrec*-values () (identifier=?_907 environment_1487 identifier1_1488 environment_1487 identifier2_1489)))))) (transformer_1483 syntax_1480 rename_1481 compare_1482)))))))) ((current-macro-environment_1491) (make-parameter_2 #f)) ((current-ellipsis?_1492) (make-parameter_2 #f)) ((current-literal?_1493) (make-parameter_2 #f)) ((current-underscore?_1494) (make-parameter_2 #f)) ((ellipsis?_1496) (case-lambda ((identifier_1495) (letrec*-values () ((current-ellipsis?_1492) identifier_1495))))) ((literal?_1498) (case-lambda ((identifier_1497) (letrec*-values () ((current-literal?_1493) identifier_1497))))) ((underscore?_1500) (case-lambda ((identifier_1499) (letrec*-values () ((current-underscore?_1494) identifier_1499))))) ((make-syntax-rules-transformer_1528) (case-lambda ((ellipsis?_1507 literal?_1506 underscore?_1505 syntax-rule-syntax*_1514 transformer-syntax_1522 macro-environment_1508) (letrec*-values () ((case-lambda ((p_1501 p_1502 p_1503 p_1504) (letrec*-values () ((case-lambda ((old_1524 old_1525 old_1526 old_1527 new_1509 new_1510 new_1511 new_1512) (letrec*-values () (dynamic-wind (case-lambda (() (letrec*-values () (p_1501 <param-set!>_7 new_1509) (p_1502 <param-set!>_7 new_1510) (p_1503 <param-set!>_7 new_1511) (p_1504 <param-set!>_7 new_1512)))) (case-lambda (() (letrec*-values (((syntax-rules-transformer_1516) (compile-syntax-rules-transformer_1515 syntax-rule-syntax*_1514)) ((pattern-syntax-vector_1519) (list->vector (map (case-lambda ((syntax-rule-syntax_1518) (letrec*-values (((pattern-syntax_1517) (car (syntax-datum_156 syntax-rule-syntax_1518)))) (derive-syntax_185 (cdr (syntax-datum_156 pattern-syntax_1517)) pattern-syntax_1517)))) syntax-rule-syntax*_1514))) ((template-syntax-vector_1521) (list->vector (map (case-lambda ((syntax-rule-syntax_1520) (letrec*-values () (cadr (syntax-datum_156 syntax-rule-syntax_1520))))) syntax-rule-syntax*_1514))) ((er-macro-transformer_1513) ((eval (cons (quote lambda) (cons (cons (quote compile-error) (cons (quote compile-note) (cons (quote transformer-syntax) (cons (quote syntax-datum) (cons (quote derive-syntax) (cons (quote datum->syntax) (cons (quote syntax?) (cons (quote log) (cons (quote syntax->datum) (cons (quote unclose-form) (cons (quote template-syntax-vector) (cons (quote pattern-syntax-vector) (quote ()))))))))))))) (cons syntax-rules-transformer_1516 (quote ())))) *transformer-environment*_1479) compile-error_591 compile-note_597 transformer-syntax_1522 syntax-datum_156 derive-syntax_185 datum->syntax_190 syntax?_152 log_1523 syntax->datum_162 unclose-form_895 template-syntax-vector_1521 pattern-syntax-vector_1519))) (make-er-macro-transformer_1490 er-macro-transformer_1513 macro-environment_1508)))) (case-lambda (() (letrec*-values () (p_1501 <param-set!>_7 old_1524) (p_1502 <param-set!>_7 old_1525) (p_1503 <param-set!>_7 old_1526) (p_1504 <param-set!>_7 old_1527)))))))) (p_1501) (p_1502) (p_1503) (p_1504) ((p_1501 <param-convert>_5) underscore?_1505) ((p_1502 <param-convert>_5) literal?_1506) ((p_1503 <param-convert>_5) ellipsis?_1507) ((p_1504 <param-convert>_5) macro-environment_1508))))) current-underscore?_1494 current-literal?_1493 current-ellipsis?_1492 current-macro-environment_1491))))) ((compile-syntax-rules-transformer_1515) (case-lambda ((syntax-rule-syntax*_1530) (letrec*-values (((clauses_1529) (((case-lambda (() (letrec*-values (((loop_1531) (values (case-lambda ((syntax-rule-syntax*_1532 i_1535) (letrec*-values () (if (null? syntax-rule-syntax*_1532) (quote ()) ((case-lambda ((syntax-rule_1533) (letrec*-values () (if (not (if (list? syntax-rule_1533) (= (length syntax-rule_1533) 2) #f)) (begin (compile-error_591 "bad syntax-rule" (car syntax-rule-syntax*_1532)) (if #f #f (if #f #f))) (if #f #f)) ((case-lambda (() (letrec*-values ((tmp_1547 (car syntax-rule_1533))) ((case-lambda (() (letrec*-values (((pattern-syntax_1544) (apply values tmp_1547))) ((case-lambda (() (letrec*-values () ((case-lambda (() (letrec*-values ((tmp_1546 (cadr syntax-rule_1533))) ((case-lambda (() (letrec*-values (((template-syntax_1540) (apply values tmp_1546))) ((case-lambda (() (letrec*-values () ((case-lambda (() (letrec*-values ((tmp_1543 (compile-pattern_1545 pattern-syntax_1544 i_1535))) ((case-lambda (() (letrec*-values (((identifiers_1541 matcher_1537) (apply values tmp_1543))) ((case-lambda (() (letrec*-values () ((case-lambda (() (letrec*-values ((tmp_1539 (compile-template_1542 template-syntax_1540 identifiers_1541 i_1535))) ((case-lambda (() (letrec*-values (((transcriber_1538) (apply values tmp_1539))) ((case-lambda (() (letrec*-values () ((case-lambda (() (letrec*-values ((tmp_1536 (cons matcher_1537 (cons (quote =>) (cons transcriber_1538 (quote ())))))) ((case-lambda (() (letrec*-values (((clause_1534) (apply values tmp_1536))) ((case-lambda (() (letrec*-values () ((case-lambda (() (letrec*-values () (cons clause_1534 (loop_1531 (cdr syntax-rule-syntax*_1532) (+ i_1535 1)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (syntax-datum_156 (car syntax-rule-syntax*_1532)))))))))) ((case-lambda (() (letrec*-values () loop_1531)))))))) syntax-rule-syntax*_1530 0))) (cons (quote lambda) (cons (cons (quote syntax) (cons (quote rename) (cons (quote compare) (quote ())))) (cons (cons (quote define) (cons (quote form) (cons (cons (quote syntax-datum) (cons (quote syntax) (quote ()))) (quote ())))) (cons (cons (quote cond) (append clauses_1529 (cons (cons (quote else) (cons (cons (quote compile-note) (cons "the macro definition is here" (cons (quote transformer-syntax) (quote ())))) (cons (cons (quote compile-error) (cons "no expansion for macro use" (cons (quote syntax) (quote ())))) (quote ())))) (quote ())))) (quote ()))))))))) ((make-pattern-variable_1551) (case-lambda ((index_1548 depth_1549 syntax_1550) (letrec*-values () (vector index_1548 depth_1549 syntax_1550))))) ((pattern-variable-index_1553) (case-lambda ((variable_1552) (letrec*-values () (vector-ref variable_1552 0))))) ((pattern-variable-depth_1555) (case-lambda ((variable_1554) (letrec*-values () (vector-ref variable_1554 1))))) ((pattern-variable-syntax_1557) (case-lambda ((variable_1556) (letrec*-values () (vector-ref variable_1556 2))))) ((compile-pattern_1545) (case-lambda ((pattern-syntax_1558 rule-index_1562) (letrec*-values (((pattern_1559) (syntax-datum_156 pattern-syntax_1558))) (if (not (if (pair? pattern_1559) (identifier?_892 (syntax-datum_156 (car pattern_1559))) #f)) (begin (compile-error_591 "invalid pattern" pattern-syntax_1558) (if #f #f (if #f #f))) (if #f #f)) ((case-lambda (() (letrec*-values ((tmp_1563 (compile-list-pattern_1564 (derive-syntax_185 (cdr pattern_1559) pattern-syntax_1558)))) ((case-lambda (() (letrec*-values (((identifiers_1560 matcher_1561) (apply values tmp_1563))) ((case-lambda (() (letrec*-values () (values identifiers_1560 (cons matcher_1561 (cons (cons (quote derive-syntax) (cons (cons (quote cdr) (cons (quote form) (quote ()))) (cons (quote syntax) (quote ())))) (cons (cons (quote vector-ref) (cons (quote pattern-syntax-vector) (cons rule-index_1562 (quote ())))) (quote ()))))))))))))))))))))) ((make-pattern-variable-map_1565) (case-lambda (() (letrec*-values () (make-map_708 (make-eq-comparator_221)))))) ((compile-subpattern_1572) (case-lambda ((pattern-syntax_1566) (letrec*-values (((pattern_1567) (syntax-datum_156 pattern-syntax_1566))) (if (identifier?_892 pattern_1567) (if (literal?_1498 pattern_1567) (values (make-pattern-variable-map_1565) (cons (quote lambda) (cons (cons (quote syntax) (cons (quote pattern-syntax) (quote ()))) (cons (cons (quote and) (cons (cons (quote compare) (cons (cons (quote syntax-datum) (cons (quote syntax) (quote ()))) (cons (cons (quote rename) (cons (cons (quote syntax-datum) (cons (quote pattern-syntax) (quote ()))) (quote ()))) (quote ())))) (cons (list->vector (quote ())) (quote ())))) (quote ()))))) (if (underscore?_1500 pattern_1567) (values (make-pattern-variable-map_1565) (cons (quote lambda) (cons (cons (quote syntax) (cons (quote pattern-syntax) (quote ()))) (cons (list->vector (quote ())) (quote ()))))) (values (map-set_723 (make-pattern-variable-map_1565) pattern_1567 (make-pattern-variable_1551 0 0 pattern-syntax_1566)) (cons (quote lambda) (cons (cons (quote syntax) (cons (quote pattern-syntax) (quote ()))) (cons (cons (quote vector) (cons (cons (quote syntax-datum) (cons (quote syntax) (quote ()))) (quote ()))) (quote ()))))))) (if (vector? pattern_1567) ((case-lambda (() (letrec*-values ((tmp_1571 (compile-list-pattern_1564 (derive-syntax_185 (vector->list pattern_1567) pattern-syntax_1566)))) ((case-lambda (() (letrec*-values (((variables-map_1569 matcher_1570) (apply values tmp_1571))) ((case-lambda (() (letrec*-values () (values variables-map_1569 (cons (quote lambda) (cons (cons (quote syntax) (cons (quote pattern-syntax) (quote ()))) (cons (cons (quote let) (cons (cons (cons (quote form) (cons (cons (quote syntax-datum) (cons (quote syntax) (quote ()))) (quote ()))) (quote ())) (cons (cons (quote and) (cons (cons (quote vector?) (cons (quote form) (quote ()))) (cons (cons (quote let) (cons (cons (cons (quote list) (cons (cons (quote vector->list) (cons (quote form) (quote ()))) (quote ()))) (quote ())) (cons (cons matcher_1570 (cons (cons (quote derive-syntax) (cons (quote list) (cons (quote syntax) (quote ())))) (cons (cons (quote derive-syntax) (cons (quote list) (cons (quote pattern-syntax) (quote ())))) (quote ())))) (quote ())))) (quote ())))) (quote ())))) (quote ()))))))))))))))))) (if (circular-list?_668 pattern_1567) (compile-error_591 "circular pattern in source" pattern-syntax_1566) (if (null? pattern_1567) (values (make-pattern-variable-map_1565) (cons (quote lambda) (cons (cons (quote syntax) (cons (quote pattern-syntax) (quote ()))) (cons (cons (quote null?) (cons (cons (quote syntax-datum) (cons (quote syntax) (quote ()))) (quote ()))) (quote ()))))) (if (pair? pattern_1567) (compile-list-pattern_1564 pattern-syntax_1566) (if (constant?_1568 pattern_1567) (values (make-pattern-variable-map_1565) (cons (quote lambda) (cons (cons (quote syntax) (cons (quote pattern-syntax) (quote ()))) (cons (cons (quote equal?) (cons (cons (quote syntax-datum) (cons (quote syntax) (quote ()))) (cons (cons (quote syntax-datum) (cons (quote pattern-syntax) (quote ()))) (quote ())))) (quote ()))))) (compile-error_591 "invalid subpattern" pattern-syntax_1566))))))))))) ((make-pattern-element_1577) (case-lambda ((syntax_1573 index_1574 from-end?_1575 repeated?_1576) (letrec*-values () (vector syntax_1573 index_1574 from-end?_1575 repeated?_1576))))) ((pattern-element-syntax_1579) (case-lambda ((pattern-element_1578) (letrec*-values () (vector-ref pattern-element_1578 0))))) ((pattern-element-index_1581) (case-lambda ((pattern-element_1580) (letrec*-values () (vector-ref pattern-element_1580 1))))) ((pattern-element-from-end?_1583) (case-lambda ((pattern-element_1582) (letrec*-values () (vector-ref pattern-element_1582 2))))) ((pattern-element-repeated?_1585) (case-lambda ((pattern-element_1584) (letrec*-values () (vector-ref pattern-element_1584 3))))) ((pattern-element-set-repeated?!_1588) (case-lambda ((pattern-element_1586 repeated?_1587) (letrec*-values () (vector-set! pattern-element_1586 3 repeated?_1587))))) ((analyze-pattern-list_1599) (case-lambda ((pattern-list_1589) (letrec*-values (((return_1595) (case-lambda ((%pattern-element*_1596 repeated_1597 dotted?_1598) (letrec*-values () (values (reverse (if repeated_1597 (cons repeated_1597 %pattern-element*_1596) %pattern-element*_1596)) (if repeated_1597 #t #f) dotted?_1598)))))) (((case-lambda (() (letrec*-values (((loop_1590) (values (case-lambda ((pattern-list_1591 %pattern-element*_1594 repeated_1593 i_1592) (letrec*-values () (if (null? pattern-list_1591) (return_1595 %pattern-element*_1594 repeated_1593 #f) (if (pair? pattern-list_1591) (if (ellipsis?_1496 (syntax-datum_156 (car pattern-list_1591))) (begin (if repeated_1593 (begin (compile-error_591 "extraneous ellipsis" (car pattern-list_1591)) (if #f #f (if #f #f))) (if #f #f)) (if (null? %pattern-element*_1594) (begin (compile-error_591 "ellipsis is not preceded by a pattern" (car pattern-list_1591)) (if #f #f (if #f #f))) (if #f #f)) (pattern-element-set-repeated?!_1588 (car %pattern-element*_1594) #t) (loop_1590 (cdr pattern-list_1591) (cdr %pattern-element*_1594) (car %pattern-element*_1594) (+ i_1592 1))) (loop_1590 (cdr pattern-list_1591) (cons (make-pattern-element_1577 (car pattern-list_1591) i_1592 (if repeated_1593 #t #f) #f) %pattern-element*_1594) repeated_1593 (+ i_1592 1))) (begin (if (ellipsis?_1496 (syntax-datum_156 pattern-list_1591)) (begin (compile-error_591 "ellipsis not allowed as dotted tail" pattern-list_1591) (if #f #f (if #f #f))) (if #f #f)) (return_1595 (cons (make-pattern-element_1577 pattern-list_1591 i_1592 (if repeated_1593 #t #f) #f) %pattern-element*_1594) repeated_1593 #t)))))))))) ((case-lambda (() (letrec*-values () loop_1590)))))))) pattern-list_1589 (quote ()) #f 0))))) ((make-submatcher_1603) (case-lambda ((variable-map_1600 matcher_1601 index_1602) (letrec*-values () (vector variable-map_1600 matcher_1601 index_1602))))) ((submatcher-variable-map_1605) (case-lambda ((matcher_1604) (letrec*-values () (vector-ref matcher_1604 0))))) ((submatcher-matcher_1607) (case-lambda ((matcher_1606) (letrec*-values () (vector-ref matcher_1606 1))))) ((submatcher-index_1609) (case-lambda ((matcher_1608) (letrec*-values () (vector-ref matcher_1608 2))))) ((compile-list-pattern_1564) (case-lambda ((pattern-syntax_1629) (letrec*-values (((variable-count_1612) 0) ((variable-map_1610) (make-pattern-variable-map_1565)) ((insert-pattern-variable!_1619) (case-lambda ((identifier_1613 variable_1616 offset_1617 depth-increase_1618) (letrec*-values () ((case-lambda ((temp_1614) (letrec*-values () (if temp_1614 ((case-lambda ((old-variable_1615) (letrec*-values () (compile-note_597 "first appearance was here" (pattern-variable-syntax_1557 old-variable_1615)) (compile-error_591 "pattern variable has already appeared once" (pattern-variable-syntax_1557 variable_1616))))) temp_1614) (if #f #f))))) (map-ref/default_719 variable-map_1610 identifier_1613 #f)) (set! variable-map_1610 (map-set_723 variable-map_1610 identifier_1613 (make-pattern-variable_1551 (+ offset_1617 (pattern-variable-index_1553 variable_1616)) (+ (pattern-variable-depth_1555 variable_1616) depth-increase_1618) (pattern-variable-syntax_1557 variable_1616)))) (set! variable-count_1612 (+ variable-count_1612 1)))))) ((submatcher-compile!_1628) (case-lambda ((pattern-element_1626) (letrec*-values (((depth-increase_1623) (if (pattern-element-repeated?_1585 pattern-element_1626) 1 0)) ((subvariable-map_1624 matcher_1627) (compile-subpattern_1572 (pattern-element-syntax_1579 pattern-element_1626))) ((submatcher_1625) (make-submatcher_1603 subvariable-map_1624 matcher_1627 variable-count_1612)) ((offset_1622) variable-count_1612)) (map-for-each_739 (case-lambda ((identifier_1620 variable_1621) (letrec*-values () (insert-pattern-variable!_1619 identifier_1620 variable_1621 offset_1622 depth-increase_1623)))) subvariable-map_1624) submatcher_1625)))) ((pattern_1630) (syntax-datum_156 pattern-syntax_1629)) ((pattern-element*_1633 repeated?_1632 dotted-pattern?_1631) (analyze-pattern-list_1599 pattern_1630)) ((submatcher*_1634) (map-in-order_687 submatcher-compile!_1628 pattern-element*_1633)) ((gen-submatcher-call_1650) (case-lambda ((pattern-element_1648 submatcher_1647) (letrec*-values (((variable-map_1638) (submatcher-variable-map_1605 submatcher_1647)) ((matcher_1635) (submatcher-matcher_1607 submatcher_1647)) ((variable-offset_1639) (submatcher-index_1609 submatcher_1647)) ((element-index_1637) (pattern-element-index_1581 pattern-element_1648)) ((from-end?_1649) (pattern-element-from-end?_1583 pattern-element_1648)) ((element-repeated?_1646) (pattern-element-repeated?_1585 pattern-element_1648)) ((input-index_1636) (if from-end?_1649 (cons (quote +) (cons (quote input-length) (cons (- element-index_1637 (length pattern-element*_1633) 1 (if (if dotted-pattern?_1631 repeated?_1632 #f) -1 0)) (quote ())))) element-index_1637))) (if element-repeated?_1646 (cons (quote let*) (cons (cons (cons (quote input-end) (cons (cons (quote +) (cons (quote input-length) (cons (- input-index_1636 (length pattern-element*_1633) (if dotted-pattern?_1631 -1 0)) (quote ())))) (quote ()))) (cons (cons (quote submatch*) (cons (cons (quote unfold) (cons (cons (quote lambda) (cons (cons (quote index) (quote ())) (cons (cons (quote >) (cons (quote index) (cons (quote input-end) (quote ())))) (quote ())))) (cons (cons (quote lambda) (cons (cons (quote index) (quote ())) (cons (cons matcher_1635 (cons (cons (quote vector-ref) (cons (quote input) (cons (quote index) (quote ())))) (cons (cons (quote vector-ref) (cons (quote pattern-vector) (cons element-index_1637 (quote ())))) (quote ())))) (quote ())))) (cons (cons (quote lambda) (cons (cons (quote index) (quote ())) (cons (cons (quote +) (cons (quote index) (cons 1 (quote ())))) (quote ())))) (cons input-index_1636 (quote ())))))) (quote ()))) (quote ()))) (cons (cons (quote and) (cons (cons (quote every) (cons (cons (quote lambda) (cons (cons (quote submatch) (quote ())) (cons (quote submatch) (quote ())))) (cons (quote submatch*) (quote ())))) (cons (cons (quote begin) (append (map-fold_735 variable-map_1638 (case-lambda ((identifier_1645 variable_1643 setter*_1644) (letrec*-values () (cons (cons (quote vector-set!) (cons (quote match) (cons (+ variable-offset_1639 (pattern-variable-index_1553 variable_1643)) (cons (cons (quote map) (cons (cons (quote lambda) (cons (cons (quote submatch) (quote ())) (cons (cons (quote vector-ref) (cons (quote submatch) (cons (pattern-variable-index_1553 variable_1643) (quote ())))) (quote ())))) (cons (quote submatch*) (quote ())))) (quote ()))))) setter*_1644)))) (quote ())) (cons #t (quote ())))) (quote ())))) (quote ())))) (cons (quote let) (cons (cons (cons (quote submatch) (cons (cons matcher_1635 (cons (cons (quote vector-ref) (cons (quote input) (cons input-index_1636 (quote ())))) (cons (cons (quote vector-ref) (cons (quote pattern-vector) (cons element-index_1637 (quote ())))) (quote ())))) (quote ()))) (quote ())) (cons (cons (quote and) (cons (quote submatch) (cons (cons (quote begin) (append (map-fold_735 variable-map_1638 (case-lambda ((identifier_1642 variable_1640 setter*_1641) (letrec*-values () (cons (cons (quote vector-set!) (cons (quote match) (cons (+ variable-offset_1639 (pattern-variable-index_1553 variable_1640)) (cons (cons (quote vector-ref) (cons (quote submatch) (cons (pattern-variable-index_1553 variable_1640) (quote ())))) (quote ()))))) setter*_1641)))) (quote ())) (cons #t (quote ())))) (quote ())))) (quote ()))))))))) ((matcher_1611) (cons (quote lambda) (cons (cons (quote syntax) (cons (quote pattern-syntax) (quote ()))) (cons (cons (quote define) (cons (quote pattern) (cons (cons (quote syntax-datum) (cons (quote pattern-syntax) (quote ()))) (quote ())))) (cons (cons (quote define) (cons (quote pattern-vector) (cons (cons (quote list->vector) (cons (if dotted-pattern?_1631 (cons (quote append) (cons (cons (quote drop-right) (cons (quote pattern) (cons 0 (quote ())))) (cons (cons (quote list) (cons (cons (quote take-right) (cons (quote pattern) (cons 0 (quote ())))) (quote ()))) (quote ())))) (quote pattern)) (quote ()))) (quote ())))) (cons (cons (quote define) (cons (quote form) (cons (cons (quote syntax-datum) (cons (quote syntax) (quote ()))) (quote ())))) (cons (cons (quote when) (cons (cons (quote circular-list?) (cons (quote form) (quote ()))) (cons (cons (quote compile-error) (cons "circular list in source" (cons (quote syntax) (quote ())))) (quote ())))) (cons (cons (quote let*) (cons (cons (cons (quote left) (cons (cons (quote drop-right) (cons (quote form) (cons 0 (quote ())))) (quote ()))) (cons (cons (quote right) (cons (cons (quote take-right) (cons (quote form) (cons 0 (quote ())))) (quote ()))) (cons (cons (quote input-length) (cons (cons (quote length) (cons (quote left) (quote ()))) (quote ()))) (quote ())))) (cons (cons (quote and) (append (if dotted-pattern?_1631 (quote ()) (cons (cons (quote null?) (cons (quote right) (quote ()))) (quote ()))) (cons (if ((case-lambda ((x_1651) (letrec*-values () (if x_1651 x_1651 dotted-pattern?_1631)))) repeated?_1632) (cons (quote >=) (cons (quote input-length) (cons (- (length pattern-element*_1633) (if repeated?_1632 1 0) (if dotted-pattern?_1631 1 0)) (quote ())))) (cons (quote =) (cons (quote input-length) (cons (length pattern-element*_1633) (quote ()))))) (cons (cons (quote let) (cons (cons (cons (quote input) (cons (cons (quote list->vector) (cons (if dotted-pattern?_1631 (if repeated?_1632 (cons (quote append) (cons (quote left) (cons (cons (quote list) (cons (cons (quote if) (cons (cons (quote null?) (cons (quote right) (quote ()))) (cons (cons (quote derive-syntax) (cons (cons (quote quote) (cons (quote ()) (quote ()))) (cons (quote syntax) (quote ())))) (cons (quote right) (quote ()))))) (quote ()))) (quote ())))) (cons (quote let*-values) (cons (cons (cons (cons (quote head) (cons (quote tail) (quote ()))) (cons (cons (quote split-at) (cons (quote left) (cons (- (length pattern-element*_1633) 1) (quote ())))) (quote ()))) (cons (cons (cons (quote tail) (quote ())) (cons (cons (quote append) (cons (quote tail) (cons (quote right) (quote ())))) (quote ()))) (quote ()))) (cons (cons (quote append) (cons (quote head) (cons (cons (quote list) (cons (cons (quote if) (cons (cons (quote syntax?) (cons (quote tail) (quote ()))) (cons (quote tail) (cons (cons (quote derive-syntax) (cons (quote tail) (cons (quote syntax) (quote ())))) (quote ()))))) (quote ()))) (quote ())))) (quote ()))))) (quote left)) (quote ()))) (quote ()))) (cons (cons (quote match) (cons (cons (quote make-vector) (cons variable-count_1612 (quote ()))) (quote ()))) (quote ()))) (cons (cons (quote and) (append (map gen-submatcher-call_1650 pattern-element*_1633 submatcher*_1634) (cons (quote match) (quote ())))) (quote ())))) (quote ()))))) (quote ())))) (quote ())))))))))) (values variable-map_1610 matcher_1611))))) ((log_1523) (case-lambda (args_1653 (letrec*-values () (for-each (case-lambda ((arg_1652) (letrec*-values () (display_80 arg_1652 (current-error-port_11)) (display_80 " " (current-error-port_11)) #t))) args_1653) (newline_44 (current-error-port_11)) #t)))) ((compile-template_1542) (case-lambda ((template-syntax_1658 variables_1659 rule-index_1657) (letrec*-values (((slots_1656 transcriber_1654) (compile-subtemplate_1660 template-syntax_1658 variables_1659 0))) (cons (quote lambda) (cons (cons (quote pattern-variables) (quote ())) (cons (cons transcriber_1654 (cons (cons (quote vector) (append (map (case-lambda ((slot_1655) (letrec*-values () (cons (quote vector-ref) (cons (quote pattern-variables) (cons slot_1655 (quote ()))))))) (vector->list slots_1656)) (quote ()))) (cons (cons (quote vector-ref) (cons (quote template-syntax-vector) (cons rule-index_1657 (quote ())))) (quote ())))) (quote ())))))))) ((compile-subtemplate_1660) (case-lambda ((template-syntax_1661 variables_1666 depth_1667) (letrec*-values (((template_1662) (syntax-datum_156 template-syntax_1661))) (if (identifier?_892 template_1662) (if (ellipsis?_1496 template_1662) (compile-error_591 "extraneous ellipsis in template" template-syntax_1661) ((case-lambda ((temp_1676) (letrec*-values () (if temp_1676 ((case-lambda ((variable_1677) (letrec*-values (((variable-depth_1678) (pattern-variable-depth_1555 variable_1677))) (if (zero? variable-depth_1678) (values #0=#() (cons (quote lambda) (cons (cons (quote match) (cons (quote template-syntax) (quote ()))) (cons (cons (quote derive-syntax) (cons (cons (quote vector-ref) (cons (quote pattern-variables) (cons (pattern-variable-index_1553 variable_1677) (quote ())))) (cons (quote template-syntax) (cons (quote syntax) (quote ()))))) (quote ()))))) (if (> variable-depth_1678 depth_1667) (compile-error_591 "pattern variable followed by too few ellipses" template-syntax_1661) (if (< variable-depth_1678 depth_1667) (compile-error_591 "pattern variable followed by too many ellipses" template-syntax_1661) (values (vector (pattern-variable-index_1553 variable_1677)) (cons (quote lambda) (cons (cons (quote match) (cons (quote template-syntax) (quote ()))) (cons (cons (quote derive-syntax) (cons (cons (quote vector-ref) (cons (quote match) (cons 0 (quote ())))) (cons (quote template-syntax) (cons (quote syntax) (quote ()))))) (quote ()))))))))))) temp_1676) (values #0# (cons (quote lambda) (cons (cons (quote match) (cons (quote template-syntax) (quote ()))) (cons (cons (quote derive-syntax) (cons (cons (quote rename) (cons (cons (quote syntax-datum) (cons (quote template-syntax) (quote ()))) (quote ()))) (cons (quote template-syntax) (cons (quote syntax) (quote ()))))) (quote ()))))))))) (map-ref/default_719 variables_1666 template_1662 #f))) (if (circular-list?_668 template_1662) (compile-error_591 "circular template in source" template-syntax_1661) (if (null? template_1662) (values #0# (cons (quote lambda) (cons (cons (quote match) (cons (quote template-syntax) (quote ()))) (cons (cons (quote derive-syntax) (cons (cons (quote quote) (cons (quote ()) (quote ()))) (cons (quote template-syntax) (cons (quote syntax) (quote ()))))) (quote ()))))) (if (pair? template_1662) (if (if (list? template_1662) (if (= (length template_1662) 2) (ellipsis?_1496 (syntax-datum_156 (car template_1662))) #f) #f) ((case-lambda ((p_1669) (letrec*-values () ((case-lambda ((old_1675 new_1671) (letrec*-values () (dynamic-wind (case-lambda (() (letrec*-values () (p_1669 <param-set!>_7 new_1671)))) (case-lambda (() (letrec*-values () ((case-lambda (() (letrec*-values ((tmp_1674 (compile-subtemplate_1660 (cadr template_1662) variables_1666 depth_1667))) ((case-lambda (() (letrec*-values (((slots_1672 transcriber_1673) (apply values tmp_1674))) ((case-lambda (() (letrec*-values () (values slots_1672 (cons (quote lambda) (cons (cons (quote match) (cons (quote template-syntax) (quote ()))) (cons (cons transcriber_1673 (cons (quote match) (cons (cons (quote cadr) (cons (cons (quote syntax-datum) (cons (quote template-syntax) (quote ()))) (quote ()))) (quote ())))) (quote ())))))))))))))))))))) (case-lambda (() (letrec*-values () (p_1669 <param-set!>_7 old_1675)))))))) (p_1669) ((p_1669 <param-convert>_5) (case-lambda ((identifier_1670) (letrec*-values () #f)))))))) current-ellipsis?_1492) (compile-list-template_1668 template-syntax_1661 variables_1666 depth_1667)) (if (vector? template_1662) ((case-lambda (() (letrec*-values ((tmp_1665 (compile-list-template_1668 (derive-syntax_185 (vector->list template_1662) template-syntax_1661) variables_1666 depth_1667))) ((case-lambda (() (letrec*-values (((slots_1663 transcriber_1664) (apply values tmp_1665))) ((case-lambda (() (letrec*-values () (values slots_1663 (cons (quote lambda) (cons (cons (quote match) (cons (quote template-syntax) (quote ()))) (cons (cons (quote let) (cons (cons (cons (quote output) (cons (cons transcriber_1664 (cons (quote match) (cons (cons (quote derive-syntax) (cons (cons (quote vector->list) (cons (cons (quote syntax-datum) (cons (quote template-syntax) (quote ()))) (quote ()))) (cons (quote template-syntax) (quote ())))) (quote ())))) (quote ()))) (quote ())) (cons (cons (quote derive-syntax) (cons (cons (quote list->vector) (cons (cons (quote syntax-datum) (cons (quote output) (quote ()))) (quote ()))) (cons (quote output) (quote ())))) (quote ())))) (quote ()))))))))))))))))) (if (constant?_1568 template_1662) (values #0# (cons (quote lambda) (cons (cons (quote match) (cons (quote template-syntax) (quote ()))) (cons (cons (quote derive-syntax) (cons template_1662 (cons (quote template-syntax) (cons (quote syntax) (quote ()))))) (quote ()))))) (compile-error_591 "invalid subtemplate" template-syntax_1661))))))))))) ((make-template-element_1682) (case-lambda ((template-syntax_1679 repeated?_1680 index_1681) (letrec*-values () (vector template-syntax_1679 repeated?_1680 index_1681))))) ((template-element-syntax_1684) (case-lambda ((template-element_1683) (letrec*-values () (vector-ref template-element_1683 0))))) ((template-element-repeated?_1686) (case-lambda ((template-element_1685) (letrec*-values () (vector-ref template-element_1685 1))))) ((template-element-index_1688) (case-lambda ((template-element_1687) (letrec*-values () (vector-ref template-element_1687 2))))) ((analyze-template-list_1695) (case-lambda ((list_1689) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_1690) (values (case-lambda ((list_1692 %template-element*_1691 index_1693) (letrec*-values () (if (null? list_1692) (values (reverse %template-element*_1691) (quote ())) (if (pair? list_1692) ((case-lambda ((template-syntax_1694) (letrec*-values () (if (if (pair? (cdr list_1692)) (ellipsis?_1496 (syntax-datum_156 (cadr list_1692))) #f) (loop_1690 (cddr list_1692) (cons (make-template-element_1682 template-syntax_1694 #t index_1693) %template-element*_1691) (+ index_1693 2)) (loop_1690 (cdr list_1692) (cons (make-template-element_1682 template-syntax_1694 #f index_1693) %template-element*_1691) (+ index_1693 1)))))) (car list_1692)) (values (reverse %template-element*_1691) (cons (make-template-element_1682 list_1692 #f index_1693) (quote ()))))))))))) ((case-lambda (() (letrec*-values () loop_1690)))))))) list_1689 (quote ()) 0))))) ((make-subtranscriber_1698) (case-lambda ((slots_1696 transcriber_1697) (letrec*-values () (vector slots_1696 transcriber_1697))))) ((subtranscriber-slots_1700) (case-lambda ((subtranscriber_1699) (letrec*-values () (vector-ref subtranscriber_1699 0))))) ((subtranscriber-transcriber_1702) (case-lambda ((subtranscriber_1701) (letrec*-values () (vector-ref subtranscriber_1701 1))))) ((make-slots+slot-table_1709) (case-lambda ((subtranscriber*_1708) (letrec*-values (((table_1703) (make-table_254 (make-eqv-comparator_223))) ((index_1706) 0) ((%slot*_1705) (quote ()))) (for-each (case-lambda ((subtranscriber_1707) (letrec*-values () (vector-for-each (case-lambda ((slot_1704) (letrec*-values () (table-intern!_294 table_1703 slot_1704 (case-lambda (() (letrec*-values () (set! %slot*_1705 (cons slot_1704 %slot*_1705)) (set! index_1706 (+ index_1706 1)) (- index_1706 1)))))))) (subtranscriber-slots_1700 subtranscriber_1707))))) subtranscriber*_1708) (values (list->vector (reverse %slot*_1705)) table_1703))))) ((compile-list-template_1668) (case-lambda ((template-syntax_1712 variables-map_1719 depth_1720) (letrec*-values (((template_1713) (syntax-datum_156 template-syntax_1712)) ((template-element*_1715 template-element-rest*_1714) (analyze-template-list_1695 template_1713)) ((template-element-compile_1721) (case-lambda ((template-element_1716) (letrec*-values (((slots_1717 transcriber_1718) (compile-subtemplate_1660 (template-element-syntax_1684 template-element_1716) variables-map_1719 (if (template-element-repeated?_1686 template-element_1716) (+ depth_1720 1) depth_1720)))) (if (if (template-element-repeated?_1686 template-element_1716) (= (vector-length slots_1717) 0) #f) (begin (compile-error_591 "no pattern variable to repeat here" (template-element-syntax_1684 template-element_1716)) (if #f #f (if #f #f))) (if #f #f)) (make-subtranscriber_1698 slots_1717 transcriber_1718))))) ((subtranscriber*_1722) (map-in-order_687 template-element-compile_1721 template-element*_1715)) ((subtranscriber-rest*_1723) (map-in-order_687 template-element-compile_1721 template-element-rest*_1714)) ((slots_1710 slot-table_1724) (make-slots+slot-table_1709 (append subtranscriber-rest*_1723 subtranscriber*_1722))) ((gen-subtranscriber-call_1730) (case-lambda ((template-element_1728 subtranscriber_1725) (letrec*-values (((slot*_1727) (vector->list (subtranscriber-slots_1700 subtranscriber_1725)))) (if (template-element-repeated?_1686 template-element_1728) (cons (quote unfold) (cons (cons (quote lambda) (cons (cons (quote match**) (quote ())) (cons (cons (quote every) (cons (cons (quote lambda) (cons (cons (quote match*) (quote ())) (cons (cons (quote null?) (cons (quote match*) (quote ()))) (quote ())))) (cons (quote match**) (quote ())))) (quote ())))) (cons (cons (quote lambda) (cons (cons (quote match**) (quote ())) (cons (cons (quote when) (cons (cons (quote any) (cons (cons (quote lambda) (cons (cons (quote match*) (quote ())) (cons (cons (quote null?) (cons (quote match*) (quote ()))) (quote ())))) (cons (quote match**) (quote ())))) (cons (cons (quote compile-error) (cons "output cannot be build" (cons (quote template-syntax) (quote ())))) (quote ())))) (cons (cons (subtranscriber-transcriber_1702 subtranscriber_1725) (cons (cons (quote list->vector) (cons (cons (quote map) (cons (quote car) (cons (quote match**) (quote ())))) (quote ()))) (cons (cons (quote vector-ref) (cons (quote template-syntax-vector) (cons (template-element-index_1688 template-element_1728) (quote ())))) (quote ())))) (quote ()))))) (cons (cons (quote lambda) (cons (cons (quote match**) (quote ())) (cons (cons (quote map) (cons (quote cdr) (cons (quote match**) (quote ())))) (quote ())))) (cons (cons (quote list) (append (map (case-lambda ((slot_1729) (letrec*-values () (cons (quote vector-ref) (cons (quote match) (cons (table-ref_259 slot-table_1724 slot_1729) (quote ()))))))) slot*_1727) (quote ()))) (quote ())))))) (cons (quote list) (cons (cons (subtranscriber-transcriber_1702 subtranscriber_1725) (cons (cons (quote vector) (append (map (case-lambda ((slot_1726) (letrec*-values () (cons (quote vector-ref) (cons (quote match) (cons (table-ref_259 slot-table_1724 slot_1726) (quote ()))))))) slot*_1727) (quote ()))) (cons (cons (quote vector-ref) (cons (quote template-syntax-vector) (cons (template-element-index_1688 template-element_1728) (quote ())))) (quote ())))) (quote ())))))))) ((transcriber_1711) (cons (quote lambda) (cons (cons (quote match) (cons (quote template-syntax) (quote ()))) (cons (cons (quote let*) (cons (cons (cons (quote template) (cons (cons (quote syntax-datum) (cons (quote template-syntax) (quote ()))) (quote ()))) (cons (cons (quote template-syntax-vector) (cons (cons (quote list->vector) (cons (cons (quote append) (cons (cons (quote drop-right) (cons (quote template) (cons 0 (quote ())))) (cons (cons (quote let) (cons (cons (cons (quote rest) (cons (cons (quote take-right) (cons (quote template) (cons 0 (quote ())))) (quote ()))) (quote ())) (cons (cons (quote if) (cons (cons (quote null?) (cons (quote rest) (quote ()))) (cons (quote rest) (cons (cons (quote list) (cons (quote rest) (quote ()))) (quote ()))))) (quote ())))) (quote ())))) (quote ()))) (quote ()))) (cons (cons (quote output) (cons (cons (quote append) (append (map-in-order_687 gen-subtranscriber-call_1730 template-element*_1715 subtranscriber*_1722) (cons (if (null? template-element-rest*_1714) (quote (quote ())) (cons (quote let) (cons (cons (cons (quote tail) (cons (cons (quote car) (cons (gen-subtranscriber-call_1730 (car template-element-rest*_1714) (car subtranscriber-rest*_1723)) (quote ()))) (quote ()))) (quote ())) (cons (cons (quote if) (cons (cons (quote or) (cons (cons (quote pair?) (cons (cons (quote syntax-datum) (cons (quote tail) (quote ()))) (quote ()))) (cons (cons (quote null?) (cons (cons (quote syntax-datum) (cons (quote tail) (quote ()))) (quote ()))) (quote ())))) (cons (cons (quote syntax-datum) (cons (quote tail) (quote ()))) (cons (quote tail) (quote ()))))) (quote ()))))) (quote ())))) (quote ()))) (quote ())))) (cons (cons (quote derive-syntax) (cons (quote output) (cons (quote template-syntax) (cons (quote syntax) (quote ()))))) (quote ())))) (quote ())))))) (values slots_1710 transcriber_1711))))) ((constant?_1568) (case-lambda ((datum_1731) (letrec*-values () ((case-lambda ((x_1736) (letrec*-values () (if x_1736 x_1736 ((case-lambda ((x_1735) (letrec*-values () (if x_1735 x_1735 ((case-lambda ((x_1734) (letrec*-values () (if x_1734 x_1734 ((case-lambda ((x_1733) (letrec*-values () (if x_1733 x_1733 ((case-lambda ((x_1732) (letrec*-values () (if x_1732 x_1732 (vector? datum_1731))))) (bytevector? datum_1731)))))) (number? datum_1731)))))) (boolean? datum_1731)))))) (string? datum_1731)))))) (char? datum_1731)))))) ((assert-identifier!_1738) (case-lambda ((syntax_1737) (letrec*-values () (if (not (identifier?_892 (syntax-datum_156 syntax_1737))) (begin (compile-error_591 "bad identifier" syntax_1737) (if #f #f (if #f #f))) (if #f #f)))))) ((assert-flist!_1740) (case-lambda ((syntax_1739) (letrec*-values () (if (circular-list?_668 syntax_1739) (begin (compile-error_591 "circular list in source" syntax_1739) (if #f #f (if #f #f))) (if #f #f)))))) ((unpack-parameters_1753) (case-lambda ((parameters-syntax_1750) (letrec*-values (((variable-set_1746) (make-table_254 (make-eq-comparator_221))) ((assert-unique-variable!_1744) (case-lambda ((variable-syntax_1747) (letrec*-values () (assert-identifier!_1738 variable-syntax_1747) (table-update!_286 variable-set_1746 (syntax-datum_156 variable-syntax_1747) (case-lambda ((syntax_1748) (letrec*-values () syntax_1748))) (case-lambda (() (letrec*-values () variable-syntax_1747))) (case-lambda ((syntax_1749) (letrec*-values () (compile-note_597 "previous appearance was here" syntax_1749) (compile-error_591 "duplicate parameter" variable-syntax_1747))))))))) ((parameters_1741) ((case-lambda ((form_1751) (letrec*-values () (if ((case-lambda ((x_1752) (letrec*-values () (if x_1752 x_1752 (pair? form_1751))))) (null? form_1751)) form_1751 parameters-syntax_1750)))) (syntax-datum_156 parameters-syntax_1750)))) (assert-flist!_1740 parameters_1741) (((case-lambda (() (letrec*-values (((loop_1742) (values (case-lambda ((parameters_1743 fixed_1745) (letrec*-values () (if (null? parameters_1743) (values (reverse fixed_1745) (quote ())) (if (pair? parameters_1743) (begin (assert-unique-variable!_1744 (car parameters_1743)) (loop_1742 (cdr parameters_1743) (cons (car parameters_1743) fixed_1745))) (begin (assert-unique-variable!_1744 parameters_1743) (values (reverse fixed_1745) (list parameters_1743))))))))))) ((case-lambda (() (letrec*-values () loop_1742)))))))) parameters_1741 (quote ())))))) ((expand-parameters!_1758) (case-lambda ((parameters-syntax_1757) (letrec*-values (((fixed_1755 rest*_1756) (unpack-parameters_1753 parameters-syntax_1757))) (make-formals_1117 (map expand-parameter!_1754 fixed_1755) (if (null? rest*_1756) #f (expand-parameter!_1754 (car rest*_1756))) parameters-syntax_1757))))) ((expand-parameter!_1754) (case-lambda ((syntax_1759) (letrec*-values () ((case-lambda ((location_1760) (letrec*-values () (insert-binding!_842 syntax_1759 location_1760) location_1760))) (make-location_1100 syntax_1759)))))) ((make-auxiliary-syntax_1763) (case-lambda ((identifier_1761) (letrec*-values () (case-lambda ((syntax_1762) (letrec*-values () (compile-error_591 (format_99 "invalid use of auxiliary syntax ‘~a’" identifier_1761) syntax_1762)))))))) ((primitive_1767) (case-lambda ((operator_1764) (letrec*-values () (case-lambda ((syntax_1766) (letrec*-values (((form_1765) (syntax-datum_156 syntax_1766))) (expand-into-expression_1271 (make-primitive-operation_990 operator_1764 (expand-expression*_1377 (cdr form_1765)) syntax_1766))))))))) ((define-values-expander_1773) (case-lambda ((syntax_1771) (letrec*-values (((form_1770) ((case-lambda ((datum_1772) (letrec*-values () (if (not (= (length datum_1772) 3)) (begin (compile-error_591 "bad define-values syntax" syntax_1771) (if #f #f (if #f #f))) (if #f #f)) datum_1772))) (syntax-datum_156 syntax_1771))) ((fixed-variables_1768 rest-variable*_1769) (unpack-parameters_1753 (list-ref form_1770 1)))) (expand-into-definition_1284 fixed-variables_1768 (if (null? rest-variable*_1769) #f (car rest-variable*_1769)) (list-ref form_1770 1) (list-ref form_1770 2) syntax_1771))))) ((syntax-error-expander_1780) (case-lambda ((syntax_1779) (letrec*-values (((form_1774) (syntax-datum_156 syntax_1779)) ((message_1775) (syntax-datum_156 (cadr form_1774)))) (if (not (string? message_1775)) (begin (compile-error_591 "not a string literal" (cadr form_1774)) (if #f #f (if #f #f))) (if #f #f)) ((case-lambda ((port_1776) (letrec*-values () (display_80 message_1775 port_1776) (if (> (length form_1774) 2) (begin (display_80 ":" port_1776) (((case-lambda (() (letrec*-values (((loop_1777) (values (case-lambda ((irritant-syntax*_1778) (letrec*-values () (if (null? irritant-syntax*_1778) (if #f #f (if #f #f)) (begin (display_80 " " port_1776) (display_80 (syntax->datum_162 (car irritant-syntax*_1778) unclose-form_895) port_1776) (loop_1777 (cdr irritant-syntax*_1778)))))))))) ((case-lambda (() (letrec*-values () loop_1777)))))))) (cddr form_1774)) (if #f #f (if #f #f))) (if #f #f)) (compile-error_591 (get-output-string port_1776) syntax_1779)))) (open-output-string)))))) ((begin-expander_1782) (case-lambda ((syntax_1781) (letrec*-values () (expand-into-sequence_1320 (cdr (syntax-datum_156 syntax_1781)) syntax_1781))))) ((set!-expander_1790) (case-lambda ((syntax_1785) (letrec*-values (((form_1784) ((case-lambda ((datum_1786) (letrec*-values () (if (not (if (= (length datum_1786) 3) (identifier?_892 (syntax-datum_156 (list-ref datum_1786 1))) #f)) (begin (compile-error_591 "bad set! syntax" syntax_1785) (if #f #f (if #f #f))) (if #f #f)) datum_1786))) (syntax-datum_156 syntax_1785))) ((identifier-syntax_1787) (list-ref form_1784 1)) ((location_1783) ((case-lambda ((identifier_1788) (letrec*-values () ((case-lambda ((denotation_1789) (letrec*-values () ((case-lambda (() (letrec*-values () (if (not denotation_1789) (begin (compile-error_591 (format_99 "identifier ‘~a’ is not bound" (unclose-form_895 identifier_1788)) identifier-syntax_1787) (if #f #f (if #f #f))) (if #f #f)) (if (procedure? denotation_1789) (begin (compile-note_597 (format_99 "identifier ‘~a’ was bound here" (unclose-form_895 identifier_1788)) (sc-lookup-syntax!_938 identifier_1788)) (compile-error_591 (format_99 "invalid use of syntax ‘~a’ as value" (unclose-form_895 identifier_1788)) identifier-syntax_1787) (if #f #f (if #f #f))) (if #f #f)) denotation_1789))))))) (sc-lookup-denotation!_905 identifier_1788))))) (syntax-datum_156 identifier-syntax_1787)))) (expand-into-expression_1271 (make-assignment_1013 location_1783 (expand-expression_1261 (list-ref form_1784 2)) syntax_1785)))))) ((if-expander_1797) (case-lambda ((syntax_1791) (letrec*-values (((form_1792) (syntax-datum_156 syntax_1791))) (if (not ((case-lambda ((x_1793) (letrec*-values () (if x_1793 x_1793 (= (length form_1792) 4))))) (= (length form_1792) 3))) (begin (compile-error_591 "bad if syntax" syntax_1791) (if #f #f (if #f #f))) (if #f #f)) ((case-lambda ((test-syntax_1794 consequent-syntax_1795 alternate-syntax_1796) (letrec*-values () (expand-into-expression_1271 (make-conditional_1090 (expand-expression_1261 test-syntax_1794) (expand-expression_1261 consequent-syntax_1795) (if alternate-syntax_1796 (expand-expression_1261 alternate-syntax_1796) (make-undefined_974 syntax_1791)) syntax_1791))))) (list-ref form_1792 1) (list-ref form_1792 2) (if (= (length form_1792) 4) (list-ref form_1792 3) #f)))))) ((case-lambda-expander_1803) (case-lambda ((syntax_1802) (letrec*-values (((form_1801) (syntax-datum_156 syntax_1802))) (expand-into-expression_1271 (make-procedure_999 (map-in-order_687 (case-lambda ((clause-syntax_1798) (letrec*-values (((form_1799) (syntax-datum_156 clause-syntax_1798))) (if (not (if (not (null? form_1799)) (list? form_1799) #f)) (begin (compile-error_591 "bad case-lambda clause" clause-syntax_1798) (if #f #f (if #f #f))) (if #f #f)) (with-scope_787 (case-lambda (() (letrec*-values (((parameters_1800) (expand-parameters!_1758 (car form_1799)))) (make-clause_1005 parameters_1800 (list (expand-body_1352 (cdr form_1799) clause-syntax_1798)) clause-syntax_1798)))))))) (cdr form_1801)) syntax_1802)))))) ((quote-expander_1806) (case-lambda ((syntax_1804) (letrec*-values (((form_1805) (syntax-datum_156 syntax_1804))) (if (not (= (length form_1805) 2)) (begin (compile-error_591 "bad quote syntax" syntax_1804) (if #f #f (if #f #f))) (if #f #f)) (expand-into-expression_1271 (make-literal_961 (syntax->datum_162 (list-ref form_1805 1) unclose-form_895) syntax_1804)))))) ((*transformer-environment*_1807) (environment (quote (scheme base)) (quote (rapid lists)))) ((er-macro-transformer-expander_1822) (case-lambda ((syntax_1809) (letrec*-values (((form_1811) ((case-lambda ((datum_1810) (letrec*-values () (if (not (= (length datum_1810) 2)) (begin (compile-error_591 "bad er-macro-transformer spec" syntax_1809) (if #f #f (if #f #f))) (if #f #f)) datum_1810))) (syntax-datum_156 syntax_1809))) ((macro-environment_1812) (get-syntactic-environment_768)) ((er-macro-transformer_1813) ((eval (cons (quote lambda) (cons (cons (quote compile-error) (cons (quote compile-note) (cons (quote syntax-datum) (cons (quote derive-syntax) (cons (quote datum->syntax) (cons (quote syntax?) (quote ()))))))) (cons (syntax->datum_162 (cadr form_1811) unclose-form_895) (quote ())))) *transformer-environment*_1807) compile-error_591 compile-note_597 syntax-datum_156 derive-syntax_185 datum->syntax_190 syntax?_152)) ((transformer_1808) (case-lambda ((syntax_1814 environment_1819) (letrec*-values (((renames_1817) (make-table_254 (make-eq-comparator_221))) ((rename_1815) (case-lambda ((identifier_1818) (letrec*-values () (table-intern!_294 renames_1817 identifier_1818 (case-lambda (() (letrec*-values () (make-syntactic-closure_881 macro-environment_1812 (quote ()) identifier_1818))))))))) ((compare_1816) (case-lambda ((identifier1_1820 identifier2_1821) (letrec*-values () (identifier=?_907 environment_1819 identifier1_1820 environment_1819 identifier2_1821)))))) (er-macro-transformer_1813 syntax_1814 rename_1815 compare_1816)))))) (expand-into-transformer_1266 transformer_1808 syntax_1809))))) ((define-syntax-expander_1831) (case-lambda ((syntax_1826) (letrec*-values (((form_1828) ((case-lambda ((datum_1827) (letrec*-values () (if (not (= (length datum_1827) 3)) (begin (compile-error_591 "bad define-syntax syntax" syntax_1826) (if #f #f (if #f #f))) (if #f #f)) datum_1827))) (syntax-datum_156 syntax_1826))) ((keyword-syntax_1823) ((case-lambda ((syntax_1829) (letrec*-values () (assert-identifier!_1738 syntax_1829) syntax_1829))) (list-ref form_1828 1))) ((transformer-syntax_1830) (list-ref form_1828 2)) ((transformer_1825) (expand-transformer_1367 transformer-syntax_1830))) (expand-into-syntax-definition_1316 keyword-syntax_1823 (case-lambda ((syntax_1824) (letrec*-values () (expand-syntax!_1317 (transformer_1825 syntax_1824 (get-syntactic-environment_768)))))) syntax_1826))))) ((ellipsis-expander_1832) (make-auxiliary-syntax_1763 (quote ...))) ((underscore-expander_1833) (make-auxiliary-syntax_1763 (quote _))) ((syntax-rules-expander_1837) (case-lambda ((transformer-syntax_1835) (letrec*-values (((ellipsis-syntax_1840 literal-syntax*_1839 syntax-rule-syntax*_1838) ((case-lambda ((transformer_1836) (letrec*-values () (if (not (if (not (null? transformer_1836)) (list? transformer_1836) #f)) (begin (compile-error_591 "bad transformer spec" transformer-syntax_1835) (if #f #f (if #f #f))) (if #f #f)) (if (not (eq? (sc-lookup-denotation!_905 (syntax-datum_156 (car transformer_1836))) syntax-rules-expander_1837)) (begin (compile-error_591 "unknown transformer spec" transformer-syntax_1835) (if #f #f (if #f #f))) (if #f #f)) (if (if (>= (length transformer_1836) 2) (list? (syntax-datum_156 (list-ref transformer_1836 1))) #f) (values #f (syntax-datum_156 (list-ref transformer_1836 1)) (list-tail transformer_1836 2)) (if (if (>= (length transformer_1836) 3) (if (identifier?_892 (syntax-datum_156 (list-ref transformer_1836 1))) (list? (syntax-datum_156 (list-ref transformer_1836 2))) #f) #f) (values (list-ref transformer_1836 1) (syntax-datum_156 (list-ref transformer_1836 2)) (list-tail transformer_1836 3)) (compile-error_591 "bad syntax-rules syntax" transformer-syntax_1835)))))) (syntax-datum_156 transformer-syntax_1835))) ((ellipsis_1841) (if ellipsis-syntax_1840 (syntax-datum_156 ellipsis-syntax_1840) #f)) ((macro-identifier=?_1845) (with-scope_787 (case-lambda (() (letrec*-values (((ellipsis-environment_1842) (get-syntactic-environment_768))) (if ellipsis-syntax_1840 (begin (insert-binding!_842 ellipsis-syntax_1840 (make-primitive_804 (quote ...) ellipsis-syntax_1840)) (if #f #f (if #f #f))) (if #f #f)) (case-lambda ((identifier1_1843 identifier2_1844) (letrec*-values () (identifier=?_907 ellipsis-environment_1842 identifier1_1843 ellipsis-environment_1842 identifier2_1844))))))))) ((macro-environment_1846) (get-syntactic-environment_768)) ((identifier-comparator_1847) (make-comparator_219 identifier?_892 macro-identifier=?_1845 #f #f)) ((literal-set_1853) (((case-lambda (() (letrec*-values (((loop_1848) (values (case-lambda ((literal-set_1851 literal-syntax*_1849) (letrec*-values () (if (null? literal-syntax*_1849) literal-set_1851 ((case-lambda ((literal-syntax_1850) (letrec*-values () ((case-lambda ((literal_1852) (letrec*-values () ((case-lambda (() (letrec*-values () (assert-identifier!_1738 literal-syntax_1850) (if (set-contains?_756 literal-set_1851 literal_1852) (begin (compile-error_591 "duplicate literal identifier" literal-syntax_1850) (if #f #f (if #f #f))) (if #f #f)) (loop_1848 (set-adjoin_759 literal-set_1851 literal_1852) (cdr literal-syntax*_1849))))))))) (syntax-datum_156 literal-syntax_1850))))) (car literal-syntax*_1849))))))))) ((case-lambda (() (letrec*-values () loop_1848)))))))) (make-set_747 identifier-comparator_1847) literal-syntax*_1839)) ((literal?_1855) (case-lambda ((identifier_1854) (letrec*-values () (set-contains?_756 literal-set_1853 identifier_1854))))) ((ellipsis?_1857) (case-lambda ((form_1856) (letrec*-values () (if (identifier?_892 form_1856) (if (not (literal?_1855 form_1856)) (if ellipsis_1841 (macro-identifier=?_1845 form_1856 ellipsis_1841) (eq? (sc-lookup-denotation!_905 form_1856) ellipsis-expander_1832)) #f) #f))))) ((underscore?_1859) (case-lambda ((identifier_1858) (letrec*-values () (eq? (sc-lookup-denotation!_905 identifier_1858) underscore-expander_1833))))) ((transformer_1834) (make-syntax-rules-transformer_1528 ellipsis?_1857 literal?_1855 underscore?_1859 syntax-rule-syntax*_1838 transformer-syntax_1835 macro-environment_1846))) (expand-into-transformer_1266 transformer_1834 transformer-syntax_1835))))) ((define-record-type-expander_1880) (case-lambda ((syntax_1867) (letrec*-values (((field-name-set_1861) (make-table_254 (make-eq-comparator_221))) ((assert-unique-field-name!_1871) (case-lambda ((field-name-syntax_1868) (letrec*-values () (assert-identifier!_1738 field-name-syntax_1868) (table-update!_286 field-name-set_1861 (syntax-datum_156 field-name-syntax_1868) (case-lambda ((syntax_1869) (letrec*-values () syntax_1869))) (case-lambda (() (letrec*-values () field-name-syntax_1868))) (case-lambda ((syntax_1870) (letrec*-values () (compile-note_597 "previous appearance was here" syntax_1870) (compile-error_591 "duplicate field name" field-name-syntax_1868))))))))) ((form_1873) ((case-lambda ((datum_1872) (letrec*-values () (if (not (>= (length datum_1872) 4)) (begin (compile-error_591 "bad define-record-type syntax" syntax_1867) (if #f #f (if #f #f))) (if #f #f)) datum_1872))) (syntax-datum_156 syntax_1867))) ((name-syntax_1863) ((case-lambda ((syntax_1874) (letrec*-values () (assert-identifier!_1738 syntax_1874) syntax_1874))) (list-ref form_1873 1))) ((constructor-name-syntax_1864 field-name-syntax*_1862) ((case-lambda ((syntax_1875) (letrec*-values () ((case-lambda ((form_1876) (letrec*-values () ((case-lambda (() (letrec*-values () (if (not (if (not (null? form_1876)) (list? form_1876) #f)) (begin (compile-error_591 "bad contructor" syntax_1875) (if #f #f (if #f #f))) (if #f #f)) (for-each assert-identifier!_1738 form_1876) (for-each assert-unique-field-name!_1871 form_1876) (set! field-name-set_1861 (make-table_254 (make-eq-comparator_221))) (values (car form_1876) (cdr form_1876))))))))) (syntax-datum_156 syntax_1875))))) (list-ref form_1873 2))) ((pred-syntax_1865) ((case-lambda ((syntax_1877) (letrec*-values () (assert-identifier!_1738 syntax_1877) syntax_1877))) (list-ref form_1873 3))) ((field*_1866) (map-in-order_687 (case-lambda ((field-syntax_1878) (letrec*-values () ((case-lambda ((form_1879) (letrec*-values () ((case-lambda (() (letrec*-values () (if (not (if (list? form_1879) (<= 2 (length form_1879) 3) #f)) (begin (compile-error_591 "bad field" syntax_1867) (if #f #f (if #f #f))) (if #f #f)) (for-each assert-identifier!_1738 form_1879) (assert-unique-field-name!_1871 (car form_1879)) form_1879))))))) (syntax-datum_156 field-syntax_1878))))) (list-tail form_1873 4)))) (for-each (case-lambda ((field-name-syntax_1860) (letrec*-values () (if (not (table-ref/default_268 field-name-set_1861 (syntax-datum_156 field-name-syntax_1860) #f)) (begin (compile-error_591 "not a field name" field-name-syntax_1860) (if #f #f (if #f #f))) (if #f #f))))) field-name-syntax*_1862) (expand-into-record-type-definition_1311 name-syntax_1863 constructor-name-syntax_1864 field-name-syntax*_1862 pred-syntax_1865 field*_1866 syntax_1867))))) ((define-primitive-expander_1892) (case-lambda ((syntax_1881) (letrec*-values () ((case-lambda ((form_1882) (letrec*-values () (if form_1882 (if ((case-lambda ((x_1891) (letrec*-values () (if x_1891 x_1891 (compile-error_591 "bad define-primitive syntax" syntax_1881))))) (= (length form_1882) 3)) ((case-lambda ((identifier-syntax_1883) (letrec*-values () (if identifier-syntax_1883 ((case-lambda ((identifier_1889) (letrec*-values () (if identifier_1889 (if ((case-lambda ((x_1890) (letrec*-values () (if x_1890 x_1890 (compile-error_591 "identifier expected" identifier-syntax_1883))))) (identifier?_892 identifier_1889)) ((case-lambda ((literal-syntax_1884) (letrec*-values () (if literal-syntax_1884 ((case-lambda ((literal_1885) (letrec*-values () (if literal_1885 (if ((case-lambda ((x_1888) (letrec*-values () (if x_1888 x_1888 (compile-error_591 "literal expected" literal-syntax_1884))))) (literal?_963 literal_1885)) ((case-lambda ((symbol_1886) (letrec*-values () (if symbol_1886 (if ((case-lambda ((x_1887) (letrec*-values () (if x_1887 x_1887 (compile-error_591 "symbol expected" literal-syntax_1884))))) (symbol? symbol_1886)) (begin #t (expand-into-syntax-definition_1316 identifier-syntax_1883 (make-primitive_804 symbol_1886 literal-syntax_1884) syntax_1881)) #f) #f)))) (literal-value_965 literal_1885)) #f) #f)))) (expand-expression_1261 literal-syntax_1884)) #f)))) (list-ref form_1882 2)) #f) #f)))) (syntax->datum_162 identifier-syntax_1883 unclose-form_895)) #f)))) (list-ref form_1882 1)) #f) #f)))) (syntax-datum_156 syntax_1881)))))) ((primitive-environment_1893) ((case-lambda (() (letrec*-values () (make-environment_1401 (quote ()) (with-syntactic-environment_782 (make-syntactic-environment_769) (case-lambda (() (letrec*-values () (insert-binding!_842 (datum->syntax_190 (quote quote)) quote-expander_1806) (insert-binding!_842 (datum->syntax_190 (quote case-lambda)) case-lambda-expander_1803) (insert-binding!_842 (datum->syntax_190 (quote if)) if-expander_1797) (insert-binding!_842 (datum->syntax_190 (quote set!)) set!-expander_1790) (insert-binding!_842 (datum->syntax_190 (quote begin)) begin-expander_1782) (insert-binding!_842 (datum->syntax_190 (quote er-macro-transformer)) er-macro-transformer-expander_1822) (insert-binding!_842 (datum->syntax_190 (quote syntax-rules)) syntax-rules-expander_1837) (insert-binding!_842 (datum->syntax_190 (quote ...)) ellipsis-expander_1832) (insert-binding!_842 (datum->syntax_190 (quote _)) underscore-expander_1833) (insert-binding!_842 (datum->syntax_190 (quote syntax-error)) syntax-error-expander_1780) (insert-binding!_842 (datum->syntax_190 (quote define-values)) define-values-expander_1773) (insert-binding!_842 (datum->syntax_190 (quote define-syntax)) define-syntax-expander_1831) (insert-binding!_842 (datum->syntax_190 (quote define-record-type)) define-record-type-expander_1880) (insert-binding!_842 (datum->syntax_190 (quote define-primitive)) define-primitive-expander_1892) (get-syntactic-environment_768))))))))))) ((current-location-bindings_1894) (make-parameter_2 #f box_146)) ((%get-location-bindings_1895) (case-lambda (() (letrec*-values () (unbox_148 (current-location-bindings_1894)))))) ((get-location-bindings_1896) (case-lambda (() (letrec*-values () (reverse (%get-location-bindings_1895)))))) ((add-location-bindings!_1898) (case-lambda ((bindings_1897) (letrec*-values () (set-box!_149 (current-location-bindings_1894) (append (reverse bindings_1897) (%get-location-bindings_1895))))))) ((current-library-table_1899) (make-parameter_2 #f)) ((with-initial-environment_1910) (case-lambda ((library-name_1903 initial-environment_1904 thunk_1907) (letrec*-values () ((case-lambda ((p_1900 p_1901) (letrec*-values () ((case-lambda ((old_1908 old_1909 new_1905 new_1906) (letrec*-values () (dynamic-wind (case-lambda (() (letrec*-values () (p_1900 <param-set!>_7 new_1905) (p_1901 <param-set!>_7 new_1906)))) (case-lambda (() (letrec*-values () (thunk_1907)))) (case-lambda (() (letrec*-values () (p_1900 <param-set!>_7 old_1908) (p_1901 <param-set!>_7 old_1909)))))))) (p_1900) (p_1901) ((p_1900 <param-convert>_5) ((case-lambda ((table_1902) (letrec*-values () (table-set!_276 table_1902 library-name_1903 (environment-syntactic-environment_1403 initial-environment_1904)) table_1902))) (make-table_254 (make-equal-comparator_225)))) ((p_1901 <param-convert>_5) (reverse (environment-bindings_1404 initial-environment_1904))))))) current-library-table_1899 current-location-bindings_1894))))) ((lookup-syntactic-environment_1912) (case-lambda ((library-name_1911) (letrec*-values () (table-ref/default_268 (current-library-table_1899) library-name_1911 #f))))) ((insert-library!_1914) (case-lambda ((library-name_1913) (letrec*-values () (table-set!_276 (current-library-table_1899) library-name_1913 #f))))) ((library-loading?_1916) (case-lambda ((library-name_1915) (letrec*-values () (not (table-ref/default_268 (current-library-table_1899) library-name_1915 #t)))))) ((update-library!_1919) (case-lambda ((library-name_1917 syntactic-environment_1918) (letrec*-values () (table-set!_276 (current-library-table_1899) library-name_1917 syntactic-environment_1918))))) ((expand-import-sets_1923) (case-lambda ((import-sets_1921) (letrec*-values () (with-initial-environment_1910 (quote (rapid primitive)) primitive-environment_1893 (case-lambda (() (letrec*-values (((syntactic-environment_1920) (import*!_1922 import-sets_1921))) (make-environment_1401 (get-location-bindings_1896) syntactic-environment_1920))))))))) ((import*!_1922) (case-lambda ((import-sets_1926) (letrec*-values () (with-syntactic-environment_782 (make-syntactic-environment_769) (case-lambda (() (letrec*-values () (for-each (case-lambda ((import-set_1924) (letrec*-values () (insert-bindings-from!_879 (import!_1925 import-set_1924))))) import-sets_1926) (get-syntactic-environment_768))))))))) ((import!_1925) (case-lambda ((import-set_1927) (letrec*-values (((form_1928) (syntax-datum_156 import-set_1927))) (if (not (list? form_1928)) (begin (compile-error_591 "bad import set" import-set_1927) (if #f #f (if #f #f))) (if #f #f)) (if (if (> (length form_1928) 1) (list? (syntax-datum_156 (cadr form_1928))) #f) ((case-lambda ((syntactic-environment_1933) (letrec*-values () ((case-lambda ((atom-key_1936) (letrec*-values () (if (memv atom-key_1936 (quote (only))) (with-syntactic-environment_782 (make-syntactic-environment_769) (case-lambda (() (letrec*-values () (for-each (case-lambda ((identifier-syntax_1941) (letrec*-values () (assert-identifier!_1940 identifier-syntax_1941) (insert-binding-from!_857 identifier-syntax_1941 syntactic-environment_1933)))) (cddr form_1928))))) (get-syntactic-environment_768)) (if (memv atom-key_1936 (quote (except))) (with-syntactic-environment_782 (derive-syntactic-environment_870 syntactic-environment_1933 import-set_1927) (case-lambda (() (letrec*-values () (for-each (case-lambda ((identifier-syntax_1939) (letrec*-values () (assert-identifier!_1940 identifier-syntax_1939) (delete-binding!_866 identifier-syntax_1939)))) (cddr form_1928)) (get-syntactic-environment_768))))) (if (memv atom-key_1936 (quote (prefix))) (begin (if (not (if (= (length form_1928) 3) (symbol? (syntax-datum_156 (caddr form_1928))) #f)) (begin (compile-error_591 "bad import set" import-set_1927) (if #f #f (if #f #f))) (if #f #f)) (derive-syntactic-environment_870 syntactic-environment_1933 import-set_1927 (case-lambda ((identifier_1937) (letrec*-values () (symbol-append_1938 (syntax-datum_156 (caddr form_1928)) identifier_1937)))))) (if (memv atom-key_1936 (quote (rename))) ((case-lambda ((table_1932) (letrec*-values () (for-each (case-lambda ((rename_1930) (letrec*-values (((form_1931) (syntax-datum_156 rename_1930))) (if (not (if (list? form_1931) (if (= (length form_1931) 2) (if (symbol? (syntax-datum_156 (car form_1931))) (symbol? (syntax-datum_156 (cadr form_1931))) #f) #f) #f)) (begin (compile-error_591 "bad rename" rename_1930) (if #f #f (if #f #f))) (if #f #f)) (table-set!_276 table_1932 (syntax-datum_156 (car form_1931)) (syntax-datum_156 (cadr form_1931)))))) (cddr form_1928)) (derive-syntactic-environment_870 syntactic-environment_1933 import-set_1927 (case-lambda ((identifier_1934) (letrec*-values () ((case-lambda ((x_1935) (letrec*-values () (if x_1935 x_1935 identifier_1934)))) (table-ref/default_268 table_1932 identifier_1934 #f))))))))) (make-table_254 (make-eq-comparator_221))) (compile-error_591 "invalid import set" import-set_1927)))))))) (syntax-datum_156 (car form_1928)))))) (import!_1925 (cadr form_1928))) (begin (assert-library-name!_1457 import-set_1927) (derive-syntactic-environment_870 (import-library!_1929 import-set_1927) import-set_1927))))))) ((import-library!_1929) (case-lambda ((library-name-syntax_1943) (letrec*-values (((library-name_1942) (syntax->datum_162 library-name-syntax_1943))) ((case-lambda ((temp_1952) (letrec*-values () (if temp_1952 temp_1952 (begin (if (library-loading?_1916 library-name_1942) (begin (compile-error_591 "library references itself while loading" library-name-syntax_1943) (if #f #f (if #f #f))) (if #f #f)) (insert-library!_1914 library-name_1942) ((case-lambda (() (letrec*-values ((tmp_1951 (read-library_1425 library-name-syntax_1943))) ((case-lambda (() (letrec*-values (((import-sets_1944 export-specs_1949 body_1945) (apply values tmp_1951))) ((case-lambda (() (letrec*-values () (with-syntactic-environment_782 (import*!_1922 import-sets_1944) (case-lambda (() (letrec*-values () (with-scope_787 (case-lambda (() (letrec*-values () (add-location-bindings!_1898 (expand-top-level_1333 body_1945)) ((case-lambda ((syntactic-environment_1947) (letrec*-values () (with-syntactic-environment_782 (make-syntactic-environment_769) (case-lambda (() (letrec*-values () (for-each (case-lambda ((export-spec_1946) (letrec*-values (((form_1948) (syntax-datum_156 export-spec_1946))) (if (list? form_1948) (begin (if (not (= (length form_1948) 2)) (begin (compile-error_591 "bad export spec" export-spec_1946) (if #f #f (if #f #f))) (if #f #f)) (assert-identifier!_1940 (car form_1948)) (assert-identifier!_1940 (cadr form_1948)) (insert-binding-from!_857 (car form_1948) syntactic-environment_1947 (cadr form_1948))) (begin (assert-identifier!_1940 export-spec_1946) (insert-binding-from!_857 export-spec_1946 syntactic-environment_1947)))))) export-specs_1949) ((case-lambda ((syntactic-environment_1950) (letrec*-values () (update-library!_1919 library-name_1942 syntactic-environment_1950) syntactic-environment_1950))) (get-syntactic-environment_768))))))))) (get-syntactic-environment_768))))))))))))))))))))))))))) (lookup-syntactic-environment_1912 library-name_1942)))))) ((assert-identifier!_1940) (case-lambda ((identifier-syntax_1953) (letrec*-values () (if (not (symbol? (syntax-datum_156 identifier-syntax_1953))) (begin (compile-error_591 (format_99 "bad identifier ‘~a’" (syntax-datum_156 identifier-syntax_1953)) identifier-syntax_1953) (if #f #f (if #f #f))) (if #f #f)))))) ((symbol-append_1938) (case-lambda ((symbol1_1954 symbol2_1955) (letrec*-values () (string->symbol (string-append (symbol->string symbol1_1954) (symbol->string symbol2_1955))))))) ((program-read_1957) (case-lambda ((filename_1956) (letrec*-values () (generator->list_139 (read-file_382 filename_1956 #f #f)))))) ((program-expand_1967) (case-lambda ((syntax*_1960) (letrec*-values (((body_1959 environment_1958) (call-with-current-continuation (case-lambda ((return_1965) (letrec*-values () (((case-lambda (() (letrec*-values (((loop_1961) (values (case-lambda ((syntax*_1962 import-sets_1964) (letrec*-values () ((case-lambda ((x_1966) (letrec*-values () (if x_1966 x_1966 (return_1965 syntax*_1962 (expand-import-sets_1923 (reverse import-sets_1964))))))) (if (not (null? syntax*_1962)) ((case-lambda ((form_1963) (letrec*-values () (if form_1963 (if (list? form_1963) (if (>= (length form_1963) 1) (if (eq? (syntax-datum_156 (car form_1963)) (quote import)) (begin #t (loop_1961 (cdr syntax*_1962) (append (reverse (cdr form_1963)) import-sets_1964))) #f) #f) #f) #f)))) (syntax-datum_156 (car syntax*_1962))) #f)))))))) ((case-lambda (() (letrec*-values () loop_1961)))))))) syntax*_1960 (quote ())))))))) (with-syntactic-environment_782 (environment-syntactic-environment_1403 environment_1958) (case-lambda (() (letrec*-values () (make-letrec*-expression_1039 (append (environment-bindings_1404 environment_1958) (with-scope_787 (case-lambda (() (letrec*-values () (expand-top-level_1333 body_1959)))))) (list (make-literal_961 #t #f)) #f))))))))) ((compile_1981) (case-lambda ((filename_1974) (letrec*-values () ((case-lambda ((p_1968) (letrec*-values () ((case-lambda ((old_1980 new_1969) (letrec*-values () (dynamic-wind (case-lambda (() (letrec*-values () (p_1968 <param-set!>_7 new_1969)))) (case-lambda (() (letrec*-values () ((call-with-current-continuation (case-lambda ((guard-k_1972) (letrec*-values () (with-exception-handler (case-lambda ((condition_1970) (letrec*-values () ((call-with-current-continuation (case-lambda ((handler-k_1973) (letrec*-values () (guard-k_1972 (case-lambda (() (letrec*-values () ((case-lambda ((condition_1971) (letrec*-values () (if (compile-warning?_601 condition_1971) (display-compile-error_620 condition_1971) (if (compile-error?_599 condition_1971) (begin (display-compile-error_620 condition_1971) (exit #f)) (if (read-error-object?_362 condition_1971) (begin (display-source-location_604 (read-error-object-location_363 condition_1971)) (display_80 (read-error-object-message_364 condition_1971)) (newline_44)) (if (error-object? condition_1971) (raise condition_1971) (error "unhandled exception" condition_1971)))))))) condition_1970))))))))))))) (case-lambda (() (letrec*-values () (call-with-values (case-lambda (() (letrec*-values () ((case-lambda ((read-syntax_1975) (letrec*-values () ((case-lambda ((program_1976) (letrec*-values () ((case-lambda ((expression_1977) (letrec*-values () ((case-lambda ((output_1978) (letrec*-values () ((case-lambda (() (letrec*-values () (write_84 (quote (import (rapid)))) (newline_44) (write-shared_88 output_1978) (newline_44)))))))) (expression->datum_1158 expression_1977))))) (program-expand_1967 program_1976))))) (generator->list_139 read-syntax_1975))))) (read-file_382 filename_1974 #f #f))))) (case-lambda (args_1979 (letrec*-values () (guard-k_1972 (case-lambda (() (letrec*-values () (apply values args_1979))))))))))))))))))))) (case-lambda (() (letrec*-values () (p_1968 <param-set!>_7 old_1980)))))))) (p_1968) ((p_1968 <param-convert>_5) (quote ())))))) current-notes_582))))) ((help-string_1982) (format_99 "Usage: ~a [options] file\nOptions:\n  -I<dir>        Add <dir> to the library search path\n  -h, --help     Display this information\n  -v, --version  Display compiler version information\n\n" (car (command-line)))) ((version-string_1983) "rapid-compiler (Rapid Scheme) 0.1\nCopyright (C) 2016 Marc Nieper-Wißkirchen\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\n") ((help_1984) (case-lambda (() (letrec*-values () (write-string_59 help-string_1982))))) ((version_1985) (case-lambda (() (letrec*-values () (write-string_59 version-string_1983))))) ((g_1998) (if ((case-lambda ((x_1997) (letrec*-values () (if x_1997 x_1997 (member "-h" (command-line) string=?))))) (member "--help" (command-line) string=?)) (help_1984) (if ((case-lambda ((x_1996) (letrec*-values () (if x_1996 x_1996 (member "-v" (command-line) string=?))))) (member "--version" (command-line) string=?)) (version_1985) (((case-lambda (() (letrec*-values (((loop_1986) (values (case-lambda ((command-line_1987 search-paths_1989) (letrec*-values () (if ((case-lambda ((x_1995) (letrec*-values () (if x_1995 x_1995 (begin (write-string_59 "rapid-compiler: exactly one input file needed\n") (exit #f)))))) (not (null? command-line_1987))) ((case-lambda ((argument_1988) (letrec*-values () (if argument_1988 (begin #t ((case-lambda ((x_1994) (letrec*-values () (if x_1994 x_1994 ((case-lambda ((p_1991) (letrec*-values () ((case-lambda ((old_1993 new_1992) (letrec*-values () (dynamic-wind (case-lambda (() (letrec*-values () (p_1991 <param-set!>_7 new_1992)))) (case-lambda (() (letrec*-values () (compile_1981 argument_1988)))) (case-lambda (() (letrec*-values () (p_1991 <param-set!>_7 old_1993)))))))) (p_1991) ((p_1991 <param-convert>_5) search-paths_1989))))) current-search-paths_101))))) (if (>= (string-length argument_1988) 2) (if (char=? (string-ref argument_1988 0) #\-) (begin #t ((case-lambda ((atom-key_1990) (letrec*-values () (if (memv atom-key_1990 (quote (#\I))) (loop_1986 (cdr command-line_1987) (cons (string-copy argument_1988 2) search-paths_1989)) #f)))) (string-ref argument_1988 1))) #f) #f))) #f)))) (car command-line_1987)) #f))))))) ((case-lambda (() (letrec*-values () loop_1986)))))))) (cdr (command-line)) (quote ())))))) #t)
